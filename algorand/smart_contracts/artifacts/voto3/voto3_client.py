# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "abrir_registro_compromisos", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "cerrar_registro_compromisos", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "registrar_compromiso", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "abrir_registro_raices", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "cerrar_registro_raices", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "registrar_raiz", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "abrir_registro_anuladores", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "cerrar_registro_anuladores", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "registrar_anulador", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}], "name": "Voto3", "state": {"keys": {"box": {}, "global": {"contador_compromisos": {"key": "Y29udGFkb3JfY29tcHJvbWlzb3M=", "keyType": "AVMString", "valueType": "AVMUint64"}, "contador_raices": {"key": "Y29udGFkb3JfcmFpY2Vz", "keyType": "AVMString", "valueType": "AVMUint64"}, "contador_anuladores": {"key": "Y29udGFkb3JfYW51bGFkb3Jlcw==", "keyType": "AVMString", "valueType": "AVMUint64"}, "registro_compromisos_abierto": {"key": "cmVnaXN0cm9fY29tcHJvbWlzb3NfYWJpZXJ0bw==", "keyType": "AVMString", "valueType": "AVMUint64"}, "registro_compromisos_cerrado": {"key": "cmVnaXN0cm9fY29tcHJvbWlzb3NfY2VycmFkbw==", "keyType": "AVMString", "valueType": "AVMUint64"}, "registro_raices_abierto": {"key": "cmVnaXN0cm9fcmFpY2VzX2FiaWVydG8=", "keyType": "AVMString", "valueType": "AVMUint64"}, "registro_raices_cerrado": {"key": "cmVnaXN0cm9fcmFpY2VzX2NlcnJhZG8=", "keyType": "AVMString", "valueType": "AVMUint64"}, "registro_anuladores_abierto": {"key": "cmVnaXN0cm9fYW51bGFkb3Jlc19hYmllcnRv", "keyType": "AVMString", "valueType": "AVMUint64"}, "registro_anuladores_cerrado": {"key": "cmVnaXN0cm9fYW51bGFkb3Jlc19jZXJyYWRv", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 9}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "byteCode": {"approval": "CiACAAEmChxyZWdpc3Ryb19jb21wcm9taXNvc19jZXJyYWRvF3JlZ2lzdHJvX3JhaWNlc19jZXJyYWRvBBUffHUbcmVnaXN0cm9fYW51bGFkb3Jlc19jZXJyYWRvFGNvbnRhZG9yX2NvbXByb21pc29zD2NvbnRhZG9yX3JhaWNlcxNjb250YWRvcl9hbnVsYWRvcmVzHHJlZ2lzdHJvX2NvbXByb21pc29zX2FiaWVydG8XcmVnaXN0cm9fcmFpY2VzX2FiaWVydG8bcmVnaXN0cm9fYW51bGFkb3Jlc19hYmllcnRvMRhAACEnBCJnJwUiZycGImcnByJnKCJnJwgiZykiZycJImcrImcxG0EA0oIJBMf+k8AEiAKd0gQQm2phBJp+dlEEaU6W4QScF6QwBE6BLPcEgAZ47AS5vc7BNhoAjgkAgABvAF4AUgBBADAAJAATAAIiQzEZFEQxGESIAVcWKkxQsCNDMRkURDEYRIgBKxYqTFCwI0MxGRREMRhEiAEEI0MxGRREMRhEiADZFipMULAjQzEZFEQxGESIAK0WKkxQsCNDMRkURDEYRIgAhiNDMRkURDEYRIgAWxYqTFCwI0MxGRREMRhEiAAvFipMULAjQzEZFEQxGESIAA0jQzEZQP9vMRgURCNDMQAyCRJEIihlRBREJwcjZ4kxADIJEkQiJwdlREQiKGVEFEQoI2ciJwRlRIkxADIJEkQiJwdlREQiKGVEFEQiJwRlREkjCCcETGeJMQAyCRJEIihlREQiKWVEFEQnCCNniTEAMgkSRCInCGVERCIpZUQURCkjZyInBWVEiTEAMgkSRCInCGVERCIpZUQURCInBWVESSMIJwVMZ4kxADIJEkQiKWVERCIrZUQURCcJI2eJMQAyCRJEIicJZUREIitlRBREKyNnIicGZUSJMQAyCRJEIicJZUREIitlRBREIicGZURJIwgnBkxniQ==", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 9, "patch": 0}}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [710], "errorMessage": "El registro de anuladores no est\u00e1 abierto"}, {"pc": [666, 716], "errorMessage": "El registro de anuladores ya fue cerrado"}, {"pc": [523, 550], "errorMessage": "El registro de compromisos no est\u00e1 abierto"}, {"pc": [580], "errorMessage": "El registro de compromisos no est\u00e1 cerrado"}, {"pc": [506, 529, 556], "errorMessage": "El registro de compromisos ya fue cerrado"}, {"pc": [630], "errorMessage": "El registro de ra\u00edces no est\u00e1 abierto"}, {"pc": [603, 660, 683], "errorMessage": "El registro de ra\u00edces no est\u00e1 cerrado"}, {"pc": [586, 609, 636, 689], "errorMessage": "El registro de ra\u00edces ya fue cerrado"}, {"pc": [349, 366, 383, 395, 412, 429, 441, 458, 475], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [655], "errorMessage": "Solo el creador puede abrir el registro de anuladores"}, {"pc": [500], "errorMessage": "Solo el creador puede abrir el registro de compromisos"}, {"pc": [575], "errorMessage": "Solo el creador puede abrir el registro de ra\u00edces"}, {"pc": [677], "errorMessage": "Solo el creador puede cerrar el registro de anuladores"}, {"pc": [517], "errorMessage": "Solo el creador puede cerrar el registro de compromisos"}, {"pc": [597], "errorMessage": "Solo el creador puede cerrar el registro de ra\u00edces"}, {"pc": [704], "errorMessage": "Solo el creador puede registrar anuladores"}, {"pc": [544], "errorMessage": "Solo el creador puede registrar compromisos"}, {"pc": [624], "errorMessage": "Solo el creador puede registrar ra\u00edces"}, {"pc": [492], "errorMessage": "can only call when creating"}, {"pc": [352, 369, 386, 398, 415, 432, 444, 461, 478], "errorMessage": "can only call when not creating"}, {"pc": [697, 721], "errorMessage": "check self.contador_anuladores exists"}, {"pc": [537, 561], "errorMessage": "check self.contador_compromisos exists"}, {"pc": [617, 641], "errorMessage": "check self.contador_raices exists"}, {"pc": [682, 709], "errorMessage": "check self.registro_anuladores_abierto exists"}, {"pc": [664, 687, 714], "errorMessage": "check self.registro_anuladores_cerrado exists"}, {"pc": [522, 549], "errorMessage": "check self.registro_compromisos_abierto exists"}, {"pc": [504, 527, 554, 579], "errorMessage": "check self.registro_compromisos_cerrado exists"}, {"pc": [602, 629], "errorMessage": "check self.registro_raices_abierto exists"}, {"pc": [584, 607, 634, 659], "errorMessage": "check self.registro_raices_cerrado exists"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

class Voto3Params:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def abrir_registro_compromisos(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "abrir_registro_compromisos()void",
        }))

    def cerrar_registro_compromisos(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cerrar_registro_compromisos()uint64",
        }))

    def registrar_compromiso(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registrar_compromiso()uint64",
        }))

    def abrir_registro_raices(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "abrir_registro_raices()void",
        }))

    def cerrar_registro_raices(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cerrar_registro_raices()uint64",
        }))

    def registrar_raiz(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registrar_raiz()uint64",
        }))

    def abrir_registro_anuladores(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "abrir_registro_anuladores()void",
        }))

    def cerrar_registro_anuladores(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cerrar_registro_anuladores()uint64",
        }))

    def registrar_anulador(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registrar_anulador()uint64",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class Voto3CreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def abrir_registro_compromisos(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "abrir_registro_compromisos()void",
        }))

    def cerrar_registro_compromisos(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cerrar_registro_compromisos()uint64",
        }))

    def registrar_compromiso(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registrar_compromiso()uint64",
        }))

    def abrir_registro_raices(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "abrir_registro_raices()void",
        }))

    def cerrar_registro_raices(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cerrar_registro_raices()uint64",
        }))

    def registrar_raiz(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registrar_raiz()uint64",
        }))

    def abrir_registro_anuladores(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "abrir_registro_anuladores()void",
        }))

    def cerrar_registro_anuladores(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cerrar_registro_anuladores()uint64",
        }))

    def registrar_anulador(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registrar_anulador()uint64",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class Voto3Send:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def abrir_registro_compromisos(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "abrir_registro_compromisos()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def cerrar_registro_compromisos(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cerrar_registro_compromisos()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def registrar_compromiso(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registrar_compromiso()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def abrir_registro_raices(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "abrir_registro_raices()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def cerrar_registro_raices(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cerrar_registro_raices()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def registrar_raiz(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registrar_raiz()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def abrir_registro_anuladores(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "abrir_registro_anuladores()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def cerrar_registro_anuladores(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cerrar_registro_anuladores()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def registrar_anulador(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registrar_anulador()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    contador_compromisos: int
    contador_raices: int
    contador_anuladores: int
    registro_compromisos_abierto: int
    registro_compromisos_cerrado: int
    registro_raices_abierto: int
    registro_raices_cerrado: int
    registro_anuladores_abierto: int
    registro_anuladores_cerrado: int

class Voto3State:
    """Methods to access state for the current Voto3 app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def contador_compromisos(self) -> int:
        """Get the current value of the contador_compromisos key in global_state state"""
        value = self.app_client.state.global_state.get_value("contador_compromisos")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def contador_raices(self) -> int:
        """Get the current value of the contador_raices key in global_state state"""
        value = self.app_client.state.global_state.get_value("contador_raices")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def contador_anuladores(self) -> int:
        """Get the current value of the contador_anuladores key in global_state state"""
        value = self.app_client.state.global_state.get_value("contador_anuladores")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def registro_compromisos_abierto(self) -> int:
        """Get the current value of the registro_compromisos_abierto key in global_state state"""
        value = self.app_client.state.global_state.get_value("registro_compromisos_abierto")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def registro_compromisos_cerrado(self) -> int:
        """Get the current value of the registro_compromisos_cerrado key in global_state state"""
        value = self.app_client.state.global_state.get_value("registro_compromisos_cerrado")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def registro_raices_abierto(self) -> int:
        """Get the current value of the registro_raices_abierto key in global_state state"""
        value = self.app_client.state.global_state.get_value("registro_raices_abierto")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def registro_raices_cerrado(self) -> int:
        """Get the current value of the registro_raices_cerrado key in global_state state"""
        value = self.app_client.state.global_state.get_value("registro_raices_cerrado")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def registro_anuladores_abierto(self) -> int:
        """Get the current value of the registro_anuladores_abierto key in global_state state"""
        value = self.app_client.state.global_state.get_value("registro_anuladores_abierto")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def registro_anuladores_cerrado(self) -> int:
        """Get the current value of the registro_anuladores_cerrado key in global_state state"""
        value = self.app_client.state.global_state.get_value("registro_anuladores_cerrado")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class Voto3Client:
    """Client for interacting with Voto3 smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = Voto3Params(self.app_client)
        self.create_transaction = Voto3CreateTransactionParams(self.app_client)
        self.send = Voto3Send(self.app_client)
        self.state = Voto3State(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "Voto3Client":
        return Voto3Client(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "Voto3Client":
        return Voto3Client(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "Voto3Client":
        return Voto3Client(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "Voto3Composer":
        return Voto3Composer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["abrir_registro_compromisos()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["cerrar_registro_compromisos()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["registrar_compromiso()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["abrir_registro_raices()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["cerrar_registro_raices()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["registrar_raiz()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["abrir_registro_anuladores()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["cerrar_registro_anuladores()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["registrar_anulador()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class Voto3BareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating Voto3 contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class Voto3Factory(algokit_utils.TypedAppFactoryProtocol[Voto3BareCallCreateParams, None, None]):
    """Factory for deploying and managing Voto3Client smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = Voto3FactoryParams(self.app_factory)
        self.create_transaction = Voto3FactoryCreateTransaction(self.app_factory)
        self.send = Voto3FactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: Voto3BareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[Voto3Client, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return Voto3Client(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> Voto3Client:
        """Get an app client by creator address and name"""
        return Voto3Client(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> Voto3Client:
        """Get an app client by app ID"""
        return Voto3Client(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class Voto3FactoryParams:
    """Parameters for creating transactions for Voto3 contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = Voto3FactoryCreateParams(app_factory)
        self.update = Voto3FactoryUpdateParams(app_factory)
        self.delete = Voto3FactoryDeleteParams(app_factory)

class Voto3FactoryCreateParams:
    """Parameters for 'create' operations of Voto3 contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def abrir_registro_compromisos(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the abrir_registro_compromisos()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "abrir_registro_compromisos()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def cerrar_registro_compromisos(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the cerrar_registro_compromisos()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "cerrar_registro_compromisos()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def registrar_compromiso(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the registrar_compromiso()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "registrar_compromiso()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def abrir_registro_raices(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the abrir_registro_raices()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "abrir_registro_raices()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def cerrar_registro_raices(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the cerrar_registro_raices()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "cerrar_registro_raices()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def registrar_raiz(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the registrar_raiz()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "registrar_raiz()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def abrir_registro_anuladores(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the abrir_registro_anuladores()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "abrir_registro_anuladores()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def cerrar_registro_anuladores(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the cerrar_registro_anuladores()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "cerrar_registro_anuladores()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def registrar_anulador(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the registrar_anulador()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "registrar_anulador()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class Voto3FactoryUpdateParams:
    """Parameters for 'update' operations of Voto3 contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class Voto3FactoryDeleteParams:
    """Parameters for 'delete' operations of Voto3 contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class Voto3FactoryCreateTransaction:
    """Create transactions for Voto3 contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = Voto3FactoryCreateTransactionCreate(app_factory)


class Voto3FactoryCreateTransactionCreate:
    """Create new instances of Voto3 contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class Voto3FactorySend:
    """Send calls to Voto3 contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = Voto3FactorySendCreate(app_factory)


class Voto3FactorySendCreate:
    """Send create calls to Voto3 contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[Voto3Client, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return Voto3Client(result[0]), result[1]


class Voto3Composer:
    """Composer for creating transaction groups for Voto3 contract calls"""

    def __init__(self, client: "Voto3Client"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def abrir_registro_compromisos(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.abrir_registro_compromisos(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "abrir_registro_compromisos()void", v
            )
        )
        return self

    def cerrar_registro_compromisos(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.cerrar_registro_compromisos(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "cerrar_registro_compromisos()uint64", v
            )
        )
        return self

    def registrar_compromiso(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.registrar_compromiso(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "registrar_compromiso()uint64", v
            )
        )
        return self

    def abrir_registro_raices(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.abrir_registro_raices(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "abrir_registro_raices()void", v
            )
        )
        return self

    def cerrar_registro_raices(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.cerrar_registro_raices(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "cerrar_registro_raices()uint64", v
            )
        )
        return self

    def registrar_raiz(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.registrar_raiz(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "registrar_raiz()uint64", v
            )
        )
        return self

    def abrir_registro_anuladores(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.abrir_registro_anuladores(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "abrir_registro_anuladores()void", v
            )
        )
        return self

    def cerrar_registro_anuladores(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.cerrar_registro_anuladores(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "cerrar_registro_anuladores()uint64", v
            )
        )
        return self

    def registrar_anulador(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.registrar_anulador(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "registrar_anulador()uint64", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "Voto3Composer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "Voto3Composer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
