#pragma version 10
#pragma typetrack false

// smart_contracts.voto3.contract.Voto3.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 3 2
    bytecblock "estado_contrato" 0x151f7c75 "contador_compromisos" "contador_raices" "contador_anuladores" "asset_id"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/voto3/contract.py:16-17
    // # Inicializar contadores
    // self.contador_compromisos = UInt64(0)
    bytec_2 // "contador_compromisos"
    intc_0 // 0
    app_global_put
    // smart_contracts/voto3/contract.py:18
    // self.contador_raices = UInt64(0)
    bytec_3 // "contador_raices"
    intc_0 // 0
    app_global_put
    // smart_contracts/voto3/contract.py:19
    // self.contador_anuladores = UInt64(0)
    bytec 4 // "contador_anuladores"
    intc_0 // 0
    app_global_put
    // smart_contracts/voto3/contract.py:20
    // self.estado_contrato = UInt64(0)
    bytec_0 // "estado_contrato"
    intc_0 // 0
    app_global_put
    // smart_contracts/voto3/contract.py:21
    // self.asset_id = Asset(0)
    bytec 5 // "asset_id"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // smart_contracts/voto3/contract.py:6
    // class Voto3(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@17
    pushbytess 0x7757ddca 0x3a97786b 0x894b0b9e 0xc7fe93c0 0x88029dd2 0x109b6a61 0x9a7e7651 0x694e96e1 0x9c17a430 0x4e812cf7 0x800678ec 0xb9bdcec1 // method "inicializar_eleccion(string,string,uint64)uint64", method "leer_estado_contrato()uint64", method "establecer_estado_contrato(uint64)uint64", method "abrir_registro_compromisos()void", method "cerrar_registro_compromisos()uint64", method "registrar_compromiso()uint64", method "abrir_registro_raices()void", method "cerrar_registro_raices()uint64", method "registrar_raiz()uint64", method "abrir_registro_anuladores()void", method "cerrar_registro_anuladores()uint64", method "registrar_anulador()uint64"
    txna ApplicationArgs 0
    match main_inicializar_eleccion_route@5 main_leer_estado_contrato_route@6 main_establecer_estado_contrato_route@7 main_abrir_registro_compromisos_route@8 main_cerrar_registro_compromisos_route@9 main_registrar_compromiso_route@10 main_abrir_registro_raices_route@11 main_cerrar_registro_raices_route@12 main_registrar_raiz_route@13 main_abrir_registro_anuladores_route@14 main_cerrar_registro_anuladores_route@15 main_registrar_anulador_route@16

main_after_if_else@19:
    // smart_contracts/voto3/contract.py:6
    // class Voto3(ARC4Contract):
    intc_0 // 0
    return

main_registrar_anulador_route@16:
    // smart_contracts/voto3/contract.py:169
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub registrar_anulador
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_cerrar_registro_anuladores_route@15:
    // smart_contracts/voto3/contract.py:158
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub cerrar_registro_anuladores
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_abrir_registro_anuladores_route@14:
    // smart_contracts/voto3/contract.py:147-148
    // # Métodos para anuladores
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub abrir_registro_anuladores
    intc_1 // 1
    return

main_registrar_raiz_route@13:
    // smart_contracts/voto3/contract.py:133
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub registrar_raiz
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_cerrar_registro_raices_route@12:
    // smart_contracts/voto3/contract.py:122
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub cerrar_registro_raices
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_abrir_registro_raices_route@11:
    // smart_contracts/voto3/contract.py:111-112
    // # Métodos para raíces
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub abrir_registro_raices
    intc_1 // 1
    return

main_registrar_compromiso_route@10:
    // smart_contracts/voto3/contract.py:97
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub registrar_compromiso
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_cerrar_registro_compromisos_route@9:
    // smart_contracts/voto3/contract.py:86
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub cerrar_registro_compromisos
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_abrir_registro_compromisos_route@8:
    // smart_contracts/voto3/contract.py:75-76
    // # Métodos para compromisos
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub abrir_registro_compromisos
    intc_1 // 1
    return

main_establecer_estado_contrato_route@7:
    // smart_contracts/voto3/contract.py:65
    // @abimethod(allow_actions=["NoOp"])
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/voto3/contract.py:6
    // class Voto3(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/voto3/contract.py:65
    // @abimethod(allow_actions=["NoOp"])
    callsub establecer_estado_contrato
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_leer_estado_contrato_route@6:
    // smart_contracts/voto3/contract.py:58
    // @abimethod(allow_actions=["NoOp"])
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub leer_estado_contrato
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_inicializar_eleccion_route@5:
    // smart_contracts/voto3/contract.py:25
    // @abimethod(allow_actions=["NoOp"])
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/voto3/contract.py:6
    // class Voto3(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    // smart_contracts/voto3/contract.py:25
    // @abimethod(allow_actions=["NoOp"])
    callsub inicializar_eleccion
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@17:
    // smart_contracts/voto3/contract.py:6
    // class Voto3(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@19
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts.voto3.contract.Voto3.inicializar_eleccion(asset_name: bytes, unit_name: bytes, total: uint64) -> uint64:
inicializar_eleccion:
    // smart_contracts/voto3/contract.py:25-31
    // @abimethod(allow_actions=["NoOp"])
    // def inicializar_eleccion(
    //     self,
    //     asset_name: String,
    //     unit_name: String,
    //     total: UInt64,
    // ) -> UInt64:
    proto 3 1
    // smart_contracts/voto3/contract.py:33
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/voto3/contract.py:32-34
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Solo el creador puede inicializar la elección"
    assert // Solo el creador puede inicializar la elección
    // smart_contracts/voto3/contract.py:35
    // assert self.estado_contrato == UInt64(0), "El contrato ya está inicializado"
    intc_0 // 0
    bytec_0 // "estado_contrato"
    app_global_get_ex
    assert // check self.estado_contrato exists
    !
    assert // El contrato ya está inicializado
    // smart_contracts/voto3/contract.py:40
    // assert name_bytes.length <= 32, "asset_name demasiado largo"
    frame_dig -3
    len
    pushint 32 // 32
    <=
    assert // asset_name demasiado largo
    // smart_contracts/voto3/contract.py:41
    // assert unit_bytes.length <= 8, "unit_name demasiado largo"
    frame_dig -2
    len
    pushint 8 // 8
    <=
    assert // unit_name demasiado largo
    // smart_contracts/voto3/contract.py:43-50
    // asset_txn = itxn.AssetConfig(
    //     asset_name=name_bytes,
    //     unit_name=unit_bytes,
    //     total=total,
    //     decimals=0,
    //     manager=Global.current_application_address,
    //     clawback=Global.current_application_address,
    // ).submit()
    itxn_begin
    // smart_contracts/voto3/contract.py:48
    // manager=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/voto3/contract.py:49
    // clawback=Global.current_application_address,
    dup
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetManager
    // smart_contracts/voto3/contract.py:47
    // decimals=0,
    intc_0 // 0
    itxn_field ConfigAssetDecimals
    frame_dig -1
    itxn_field ConfigAssetTotal
    frame_dig -2
    itxn_field ConfigAssetUnitName
    frame_dig -3
    itxn_field ConfigAssetName
    // smart_contracts/voto3/contract.py:43
    // asset_txn = itxn.AssetConfig(
    intc_2 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/voto3/contract.py:43-50
    // asset_txn = itxn.AssetConfig(
    //     asset_name=name_bytes,
    //     unit_name=unit_bytes,
    //     total=total,
    //     decimals=0,
    //     manager=Global.current_application_address,
    //     clawback=Global.current_application_address,
    // ).submit()
    itxn_submit
    // smart_contracts/voto3/contract.py:52
    // self.asset_id = asset_txn.created_asset
    bytec 5 // "asset_id"
    itxn CreatedAssetID
    app_global_put
    // smart_contracts/voto3/contract.py:53
    // self.estado_contrato = UInt64(1)  # Cambiar estado tras inicialización
    bytec_0 // "estado_contrato"
    intc_1 // 1
    app_global_put
    // smart_contracts/voto3/contract.py:54
    // return self.asset_id.id
    intc_0 // 0
    bytec 5 // "asset_id"
    app_global_get_ex
    assert // check self.asset_id exists
    retsub


// smart_contracts.voto3.contract.Voto3.leer_estado_contrato() -> uint64:
leer_estado_contrato:
    // smart_contracts/voto3/contract.py:61
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/voto3/contract.py:60-62
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Solo el creador puede leer el estado del contrato"
    assert // Solo el creador puede leer el estado del contrato
    // smart_contracts/voto3/contract.py:63
    // return self.estado_contrato
    intc_0 // 0
    bytec_0 // "estado_contrato"
    app_global_get_ex
    assert // check self.estado_contrato exists
    retsub


// smart_contracts.voto3.contract.Voto3.establecer_estado_contrato(nuevo_estado: uint64) -> uint64:
establecer_estado_contrato:
    // smart_contracts/voto3/contract.py:65-66
    // @abimethod(allow_actions=["NoOp"])
    // def establecer_estado_contrato(self, nuevo_estado: UInt64) -> UInt64:
    proto 1 1
    // smart_contracts/voto3/contract.py:68
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/voto3/contract.py:67-69
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Solo el creador puede establecer el estado del contrato"
    assert // Solo el creador puede establecer el estado del contrato
    // smart_contracts/voto3/contract.py:70
    // self.estado_contrato = nuevo_estado
    bytec_0 // "estado_contrato"
    frame_dig -1
    app_global_put
    // smart_contracts/voto3/contract.py:71
    // return self.estado_contrato
    frame_dig -1
    retsub


// smart_contracts.voto3.contract.Voto3.abrir_registro_compromisos() -> void:
abrir_registro_compromisos:
    // smart_contracts/voto3/contract.py:79
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/voto3/contract.py:78-80
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Solo el creador puede abrir el registro de compromisos"
    assert // Solo el creador puede abrir el registro de compromisos
    // smart_contracts/voto3/contract.py:81
    // assert self.estado_contrato == UInt64(
    intc_0 // 0
    bytec_0 // "estado_contrato"
    app_global_get_ex
    assert // check self.estado_contrato exists
    // smart_contracts/voto3/contract.py:81-83
    // assert self.estado_contrato == UInt64(
    //     1
    // ), "El contrato no está en el estado correcto"
    intc_1 // 1
    ==
    assert // El contrato no está en el estado correcto
    // smart_contracts/voto3/contract.py:84
    // self.estado_contrato = UInt64(2)
    bytec_0 // "estado_contrato"
    intc_3 // 2
    app_global_put
    retsub


// smart_contracts.voto3.contract.Voto3.cerrar_registro_compromisos() -> uint64:
cerrar_registro_compromisos:
    // smart_contracts/voto3/contract.py:89
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/voto3/contract.py:88-90
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Solo el creador puede cerrar el registro de compromisos"
    assert // Solo el creador puede cerrar el registro de compromisos
    // smart_contracts/voto3/contract.py:91
    // assert self.estado_contrato == UInt64(
    intc_0 // 0
    bytec_0 // "estado_contrato"
    app_global_get_ex
    assert // check self.estado_contrato exists
    // smart_contracts/voto3/contract.py:91-93
    // assert self.estado_contrato == UInt64(
    //     2
    // ), "El contrato no está en el estado correcto"
    intc_3 // 2
    ==
    assert // El contrato no está en el estado correcto
    // smart_contracts/voto3/contract.py:94
    // self.estado_contrato = UInt64(3)
    bytec_0 // "estado_contrato"
    intc_2 // 3
    app_global_put
    // smart_contracts/voto3/contract.py:95
    // return self.contador_compromisos
    intc_0 // 0
    bytec_2 // "contador_compromisos"
    app_global_get_ex
    assert // check self.contador_compromisos exists
    retsub


// smart_contracts.voto3.contract.Voto3.registrar_compromiso() -> uint64:
registrar_compromiso:
    // smart_contracts/voto3/contract.py:100
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/voto3/contract.py:99-101
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Solo el creador puede registrar compromisos"
    assert // Solo el creador puede registrar compromisos
    // smart_contracts/voto3/contract.py:102
    // assert self.estado_contrato == UInt64(
    intc_0 // 0
    bytec_0 // "estado_contrato"
    app_global_get_ex
    assert // check self.estado_contrato exists
    // smart_contracts/voto3/contract.py:102-104
    // assert self.estado_contrato == UInt64(
    //     2
    // ), "El contrato no está en el estado correcto"
    intc_3 // 2
    ==
    assert // El contrato no está en el estado correcto
    // smart_contracts/voto3/contract.py:105
    // current = self.contador_compromisos
    intc_0 // 0
    bytec_2 // "contador_compromisos"
    app_global_get_ex
    assert // check self.contador_compromisos exists
    // smart_contracts/voto3/contract.py:106
    // self.contador_compromisos = current + 1
    dup
    intc_1 // 1
    +
    bytec_2 // "contador_compromisos"
    swap
    app_global_put
    // smart_contracts/voto3/contract.py:107
    // return current
    retsub


// smart_contracts.voto3.contract.Voto3.abrir_registro_raices() -> void:
abrir_registro_raices:
    // smart_contracts/voto3/contract.py:115
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/voto3/contract.py:114-116
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Solo el creador puede abrir el registro de raíces"
    assert // Solo el creador puede abrir el registro de raíces
    // smart_contracts/voto3/contract.py:117
    // assert self.estado_contrato == UInt64(
    intc_0 // 0
    bytec_0 // "estado_contrato"
    app_global_get_ex
    assert // check self.estado_contrato exists
    // smart_contracts/voto3/contract.py:117-119
    // assert self.estado_contrato == UInt64(
    //     3
    // ), "El contrato no está en el estado correcto"
    intc_2 // 3
    ==
    assert // El contrato no está en el estado correcto
    // smart_contracts/voto3/contract.py:120
    // self.estado_contrato = UInt64(4)
    bytec_0 // "estado_contrato"
    pushint 4 // 4
    app_global_put
    retsub


// smart_contracts.voto3.contract.Voto3.cerrar_registro_raices() -> uint64:
cerrar_registro_raices:
    // smart_contracts/voto3/contract.py:125
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/voto3/contract.py:124-126
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Solo el creador puede cerrar el registro de raíces"
    assert // Solo el creador puede cerrar el registro de raíces
    // smart_contracts/voto3/contract.py:127
    // assert self.estado_contrato == UInt64(
    intc_0 // 0
    bytec_0 // "estado_contrato"
    app_global_get_ex
    assert // check self.estado_contrato exists
    // smart_contracts/voto3/contract.py:127-129
    // assert self.estado_contrato == UInt64(
    //     4
    // ), "El contrato no está en el estado correcto"
    pushint 4 // 4
    ==
    assert // El contrato no está en el estado correcto
    // smart_contracts/voto3/contract.py:130
    // self.estado_contrato = UInt64(5)
    bytec_0 // "estado_contrato"
    pushint 5 // 5
    app_global_put
    // smart_contracts/voto3/contract.py:131
    // return self.contador_raices
    intc_0 // 0
    bytec_3 // "contador_raices"
    app_global_get_ex
    assert // check self.contador_raices exists
    retsub


// smart_contracts.voto3.contract.Voto3.registrar_raiz() -> uint64:
registrar_raiz:
    // smart_contracts/voto3/contract.py:136
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/voto3/contract.py:135-137
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Solo el creador puede registrar raíces"
    assert // Solo el creador puede registrar raíces
    // smart_contracts/voto3/contract.py:138
    // assert self.estado_contrato == UInt64(
    intc_0 // 0
    bytec_0 // "estado_contrato"
    app_global_get_ex
    assert // check self.estado_contrato exists
    // smart_contracts/voto3/contract.py:138-140
    // assert self.estado_contrato == UInt64(
    //     4
    // ), "El contrato no está en el estado correcto"
    pushint 4 // 4
    ==
    assert // El contrato no está en el estado correcto
    // smart_contracts/voto3/contract.py:141
    // current = self.contador_raices
    intc_0 // 0
    bytec_3 // "contador_raices"
    app_global_get_ex
    assert // check self.contador_raices exists
    // smart_contracts/voto3/contract.py:142
    // self.contador_raices = current + 1
    dup
    intc_1 // 1
    +
    bytec_3 // "contador_raices"
    swap
    app_global_put
    // smart_contracts/voto3/contract.py:143
    // return current
    retsub


// smart_contracts.voto3.contract.Voto3.abrir_registro_anuladores() -> void:
abrir_registro_anuladores:
    // smart_contracts/voto3/contract.py:151
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/voto3/contract.py:150-152
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Solo el creador puede abrir el registro de anuladores"
    assert // Solo el creador puede abrir el registro de anuladores
    // smart_contracts/voto3/contract.py:153
    // assert self.estado_contrato == UInt64(
    intc_0 // 0
    bytec_0 // "estado_contrato"
    app_global_get_ex
    assert // check self.estado_contrato exists
    // smart_contracts/voto3/contract.py:153-155
    // assert self.estado_contrato == UInt64(
    //     5
    // ), "El contrato no está en el estado correcto"
    pushint 5 // 5
    ==
    assert // El contrato no está en el estado correcto
    // smart_contracts/voto3/contract.py:156
    // self.estado_contrato = UInt64(6)
    bytec_0 // "estado_contrato"
    pushint 6 // 6
    app_global_put
    retsub


// smart_contracts.voto3.contract.Voto3.cerrar_registro_anuladores() -> uint64:
cerrar_registro_anuladores:
    // smart_contracts/voto3/contract.py:161
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/voto3/contract.py:160-162
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Solo el creador puede cerrar el registro de anuladores"
    assert // Solo el creador puede cerrar el registro de anuladores
    // smart_contracts/voto3/contract.py:163
    // assert self.estado_contrato == UInt64(
    intc_0 // 0
    bytec_0 // "estado_contrato"
    app_global_get_ex
    assert // check self.estado_contrato exists
    // smart_contracts/voto3/contract.py:163-165
    // assert self.estado_contrato == UInt64(
    //     6
    // ), "El contrato no está en el estado correcto"
    pushint 6 // 6
    ==
    assert // El contrato no está en el estado correcto
    // smart_contracts/voto3/contract.py:166
    // self.estado_contrato = UInt64(7)
    bytec_0 // "estado_contrato"
    pushint 7 // 7
    app_global_put
    // smart_contracts/voto3/contract.py:167
    // return self.contador_anuladores
    intc_0 // 0
    bytec 4 // "contador_anuladores"
    app_global_get_ex
    assert // check self.contador_anuladores exists
    retsub


// smart_contracts.voto3.contract.Voto3.registrar_anulador() -> uint64:
registrar_anulador:
    // smart_contracts/voto3/contract.py:172
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/voto3/contract.py:171-173
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Solo el creador puede registrar anuladores"
    assert // Solo el creador puede registrar anuladores
    // smart_contracts/voto3/contract.py:174
    // assert self.estado_contrato == UInt64(
    intc_0 // 0
    bytec_0 // "estado_contrato"
    app_global_get_ex
    assert // check self.estado_contrato exists
    // smart_contracts/voto3/contract.py:174-176
    // assert self.estado_contrato == UInt64(
    //     6
    // ), "El contrato no está en el estado correcto"
    pushint 6 // 6
    ==
    assert // El contrato no está en el estado correcto
    // smart_contracts/voto3/contract.py:177
    // current = self.contador_anuladores
    intc_0 // 0
    bytec 4 // "contador_anuladores"
    app_global_get_ex
    assert // check self.contador_anuladores exists
    // smart_contracts/voto3/contract.py:178
    // self.contador_anuladores = current + 1
    dup
    intc_1 // 1
    +
    bytec 4 // "contador_anuladores"
    swap
    app_global_put
    // smart_contracts/voto3/contract.py:179
    // return current
    retsub
