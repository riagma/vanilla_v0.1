#pragma version 10
#pragma typetrack false

// smart_contracts.voto3.contract.Voto3.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1
    bytecblock "compromisos_registrados" "asset_id"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/voto3/contract.py:7
    // self.compromisos_registrados = UInt64(0)
    bytec_0 // "compromisos_registrados"
    intc_0 // 0
    app_global_put
    // smart_contracts/voto3/contract.py:8
    // self.asset_id = Asset(0)
    bytec_1 // "asset_id"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // smart_contracts/voto3/contract.py:5
    // class Voto3(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0xf9a9e7ed 0x0d704f0f // method "inicializar_eleccion()void", method "registrar_compromiso()void"
    txna ApplicationArgs 0
    match main_inicializar_eleccion_route@5 main_registrar_compromiso_route@6

main_after_if_else@9:
    // smart_contracts/voto3/contract.py:5
    // class Voto3(ARC4Contract):
    intc_0 // 0
    return

main_registrar_compromiso_route@6:
    // smart_contracts/voto3/contract.py:24
    // @abimethod(allow_actions=["NoOp"])
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub registrar_compromiso
    intc_1 // 1
    return

main_inicializar_eleccion_route@5:
    // smart_contracts/voto3/contract.py:10
    // @abimethod(allow_actions=["NoOp"])
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub inicializar_eleccion
    intc_1 // 1
    return

main_bare_routing@7:
    // smart_contracts/voto3/contract.py:5
    // class Voto3(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@9
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts.voto3.contract.Voto3.inicializar_eleccion() -> void:
inicializar_eleccion:
    // smart_contracts/voto3/contract.py:12
    // assert Txn.sender == Global.creator_address, "Solo el creador puede inicializar la elección"
    txn Sender
    global CreatorAddress
    ==
    assert // Solo el creador puede inicializar la elección
    // smart_contracts/voto3/contract.py:13-21
    // asset_txn = itxn.AssetConfig(
    //     asset_name=b"PAPELETA",
    //     unit_name=b"V3P",
    //     total=UInt64(100000000),
    //     decimals=0,
    //     fee=0,
    //     manager=Global.current_application_address,
    //     clawback=Global.current_application_address,
    // ).submit()
    itxn_begin
    // smart_contracts/voto3/contract.py:19
    // manager=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/voto3/contract.py:20
    // clawback=Global.current_application_address,
    dup
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetManager
    // smart_contracts/voto3/contract.py:17
    // decimals=0,
    intc_0 // 0
    itxn_field ConfigAssetDecimals
    // smart_contracts/voto3/contract.py:16
    // total=UInt64(100000000),
    pushint 100000000 // 100000000
    itxn_field ConfigAssetTotal
    // smart_contracts/voto3/contract.py:15
    // unit_name=b"V3P",
    pushbytes 0x563350
    itxn_field ConfigAssetUnitName
    // smart_contracts/voto3/contract.py:14
    // asset_name=b"PAPELETA",
    pushbytes 0x504150454c455441
    itxn_field ConfigAssetName
    // smart_contracts/voto3/contract.py:13
    // asset_txn = itxn.AssetConfig(
    pushint 3 // acfg
    itxn_field TypeEnum
    // smart_contracts/voto3/contract.py:18
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/voto3/contract.py:13-21
    // asset_txn = itxn.AssetConfig(
    //     asset_name=b"PAPELETA",
    //     unit_name=b"V3P",
    //     total=UInt64(100000000),
    //     decimals=0,
    //     fee=0,
    //     manager=Global.current_application_address,
    //     clawback=Global.current_application_address,
    // ).submit()
    itxn_submit
    // smart_contracts/voto3/contract.py:22
    // self.asset_id = asset_txn.created_asset
    bytec_1 // "asset_id"
    itxn CreatedAssetID
    app_global_put
    retsub


// smart_contracts.voto3.contract.Voto3.registrar_compromiso() -> void:
registrar_compromiso:
    // smart_contracts/voto3/contract.py:26
    // assert Txn.sender == Global.creator_address, "Solo el creador puede registrar compromisos"
    txn Sender
    global CreatorAddress
    ==
    assert // Solo el creador puede registrar compromisos
    // smart_contracts/voto3/contract.py:27
    // self.compromisos_registrados += UInt64(1)
    intc_0 // 0
    bytec_0 // "compromisos_registrados"
    app_global_get_ex
    assert // check self.compromisos_registrados exists
    intc_1 // 1
    +
    bytec_0 // "compromisos_registrados"
    swap
    app_global_put
    retsub
