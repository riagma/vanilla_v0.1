{
  "version": 3,
  "sources": [
    "../../voto3/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMQ;AAA+B;AAA/B;AACA;AAAgB;AAAhB;AAHR;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAmBK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AALL;;AAAA;;;;;;;;;AAOe;;AAAc;;AAAd;AAAP;AACY;AAMA;;AACC;;;;;AAHA;;;AADH;;;;;;;AADI;;;;;;;AADC;;;;;;;;;;;;AADH;;;;AAKJ;;;AALI;AASZ;;;AAAA;;AAIO;;AAAc;;AAAd;AAAP;AACA;AAAA;AAAA;AAAA;AAAgC;AAAhC;AAAA;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"compromisos_registrados\" \"asset_id\""
    },
    "40": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "42": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "45": {
      "op": "bytec_0 // \"compromisos_registrados\"",
      "defined_out": [
        "\"compromisos_registrados\""
      ],
      "stack_out": [
        "\"compromisos_registrados\""
      ]
    },
    "46": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"compromisos_registrados\"",
        "0"
      ],
      "stack_out": [
        "\"compromisos_registrados\"",
        "0"
      ]
    },
    "47": {
      "op": "app_global_put",
      "stack_out": []
    },
    "48": {
      "op": "bytec_1 // \"asset_id\"",
      "defined_out": [
        "\"asset_id\""
      ],
      "stack_out": [
        "\"asset_id\""
      ]
    },
    "49": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"asset_id\"",
        "0"
      ]
    },
    "50": {
      "op": "app_global_put",
      "stack_out": []
    },
    "51": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "53": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "56": {
      "op": "pushbytess 0xf9a9e7ed 0x0d704f0f // method \"inicializar_eleccion()void\", method \"registrar_compromiso()void\"",
      "defined_out": [
        "Method(inicializar_eleccion()void)",
        "Method(registrar_compromiso()void)"
      ],
      "stack_out": [
        "Method(inicializar_eleccion()void)",
        "Method(registrar_compromiso()void)"
      ]
    },
    "68": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(inicializar_eleccion()void)",
        "Method(registrar_compromiso()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(inicializar_eleccion()void)",
        "Method(registrar_compromiso()void)",
        "tmp%2#0"
      ]
    },
    "71": {
      "op": "match main_inicializar_eleccion_route@5 main_registrar_compromiso_route@6",
      "stack_out": []
    },
    "77": {
      "block": "main_after_if_else@9",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "78": {
      "op": "return",
      "stack_out": []
    },
    "79": {
      "block": "main_registrar_compromiso_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "81": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "82": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "83": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "85": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "86": {
      "callsub": "smart_contracts.voto3.contract.Voto3.registrar_compromiso",
      "op": "callsub registrar_compromiso"
    },
    "89": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "90": {
      "op": "return",
      "stack_out": []
    },
    "91": {
      "block": "main_inicializar_eleccion_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "93": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "94": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "95": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "97": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "98": {
      "callsub": "smart_contracts.voto3.contract.Voto3.inicializar_eleccion",
      "op": "callsub inicializar_eleccion"
    },
    "101": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "102": {
      "op": "return",
      "stack_out": []
    },
    "103": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "105": {
      "op": "bnz main_after_if_else@9",
      "stack_out": []
    },
    "108": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "110": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "111": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "112": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "113": {
      "op": "return",
      "stack_out": []
    },
    "114": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.inicializar_eleccion",
      "params": {},
      "block": "inicializar_eleccion",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "116": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "118": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "119": {
      "error": "Solo el creador puede inicializar la elecci\u00f3n",
      "op": "assert // Solo el creador puede inicializar la elecci\u00f3n",
      "stack_out": []
    },
    "120": {
      "op": "itxn_begin"
    },
    "121": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "123": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0"
      ]
    },
    "124": {
      "op": "itxn_field ConfigAssetClawback",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "126": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": []
    },
    "128": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "129": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": []
    },
    "131": {
      "op": "pushint 100000000 // 100000000",
      "defined_out": [
        "100000000"
      ],
      "stack_out": [
        "100000000"
      ]
    },
    "136": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "138": {
      "op": "pushbytes 0x563350",
      "defined_out": [
        "0x563350"
      ],
      "stack_out": [
        "0x563350"
      ]
    },
    "143": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "145": {
      "op": "pushbytes 0x504150454c455441",
      "defined_out": [
        "0x504150454c455441"
      ],
      "stack_out": [
        "0x504150454c455441"
      ]
    },
    "155": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "157": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "159": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "161": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "162": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "164": {
      "op": "itxn_submit"
    },
    "165": {
      "op": "bytec_1 // \"asset_id\"",
      "defined_out": [
        "\"asset_id\""
      ],
      "stack_out": [
        "\"asset_id\""
      ]
    },
    "166": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "\"asset_id\"",
        "asset_txn.CreatedAssetID#0"
      ],
      "stack_out": [
        "\"asset_id\"",
        "asset_txn.CreatedAssetID#0"
      ]
    },
    "168": {
      "op": "app_global_put",
      "stack_out": []
    },
    "169": {
      "retsub": true,
      "op": "retsub"
    },
    "170": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.registrar_compromiso",
      "params": {},
      "block": "registrar_compromiso",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "172": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "174": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "175": {
      "error": "Solo el creador puede registrar compromisos",
      "op": "assert // Solo el creador puede registrar compromisos",
      "stack_out": []
    },
    "176": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "177": {
      "op": "bytec_0 // \"compromisos_registrados\"",
      "defined_out": [
        "\"compromisos_registrados\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"compromisos_registrados\""
      ]
    },
    "178": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "179": {
      "error": "check self.compromisos_registrados exists",
      "op": "assert // check self.compromisos_registrados exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "180": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "181": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "182": {
      "op": "bytec_0 // \"compromisos_registrados\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"compromisos_registrados\""
      ]
    },
    "183": {
      "op": "swap",
      "stack_out": [
        "\"compromisos_registrados\"",
        "materialized_values%0#0"
      ]
    },
    "184": {
      "op": "app_global_put",
      "stack_out": []
    },
    "185": {
      "retsub": true,
      "op": "retsub"
    }
  }
}