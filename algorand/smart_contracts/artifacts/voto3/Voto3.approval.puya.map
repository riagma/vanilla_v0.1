{
  "version": 3,
  "sources": [
    "../../voto3/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBQ;;AAAgB;AAAhB;AACA;AAAuB;AAAvB;AAEA;AAA4B;AAA5B;AACA;AAAuB;AAAvB;AACA;;AAA2B;AAA3B;AAEA;;AAAmB;AAAnB;AACA;;AAAkB;AAAlB;AACA;;AAAiB;AAAjB;AAEA;;AAAkB;;AAAlB;AA5BR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA0LK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AA9IL;;;AAAA;;;AA8IK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AArHL;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAqHK;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAxEL;;;AAAA;AAwEK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjCA;;AAAA;AAAA;AAAA;;AAAA;AAhCL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAgCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhCL;;AAAA;;;;;;;;;AAgCA;;;AAQY;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAA;AAAP;AAKO;;AAAA;AAAqB;;AAArB;AAAP;AACO;;AAAA;AAAqB;;AAArB;AAAP;AAEY;AAKA;;AACC;;;;;AAFA;;;;;;;;;;;;;;;AAJD;;;AAAA;;;AAAA;AASZ;;;;AAAA;AACA;AAAuB;AAAvB;AACO;AAAA;;AAAA;AAAA;AAAP;AAOI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAP;AAER;;;AAGY;;AAAc;;AAAd;AADJ;AAGA;AAAA;;AAAA;AACA;;AAAA;AAOI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;AAAxB;AAAP;AAGA;AAAuB;AAAvB;;AAKI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;AAAxB;AAAP;AAGU;AAAA;AAAA;AAAA;AAC4B;AAAV;AAA5B;AAAA;;AAAA;AACA;AAKI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;AAAxB;AAAP;AAGA;AAAuB;AAAvB;AACO;AAAA;AAAA;AAAA;AAAP;AAIR;;;AAGY;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;AAAxB;AAAP;AAGA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;AAAuB;;AAAvB;;AAKI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAGU;AAAA;AAAA;AAAA;AACuB;AAAV;AAAvB;AAAA;;AAAA;AACA;AAER;;;AAGY;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAGA;AAAuB;;AAAvB;AACA;;AAAA;;AAAA;AACO;AAAA;AAAA;AAAA;AAAP;AAIO;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAGO;AAAA;;AAAA;AAAA;AAAkB;AAAA;;AAAA;AAAA;AAAiB;AAAA;;AAAA;AAAA;AAAgB;AAAA;;AAAA;AAAA;AAA1D;AAQI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAGA;AAAuB;;AAAvB;;AAKI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAGU;AAAA;;AAAA;AAAA;AAC2B;AAAV;AAA3B;;AAAA;;AAAA;AACA;AAKI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAGA;AAAuB;;AAAvB;AACO;AAAA;;AAAA;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3 2"
    },
    "7": {
      "op": "bytecblock \"estado_contrato\" 0x151f7c75 \"contador_compromisos\" \"contador_raices\" \"contador_anuladores\" \"asset_id\" \"num_bloques\" \"tam_bloque\" \"tam_resto\" \"txnId_raiz\""
    },
    "140": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "142": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "145": {
      "op": "bytec 5 // \"asset_id\"",
      "defined_out": [
        "\"asset_id\""
      ],
      "stack_out": [
        "\"asset_id\""
      ]
    },
    "147": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"asset_id\"",
        "0"
      ],
      "stack_out": [
        "\"asset_id\"",
        "0"
      ]
    },
    "148": {
      "op": "app_global_put",
      "stack_out": []
    },
    "149": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\""
      ],
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "150": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"estado_contrato\"",
        "0"
      ]
    },
    "151": {
      "op": "app_global_put",
      "stack_out": []
    },
    "152": {
      "op": "bytec_2 // \"contador_compromisos\"",
      "defined_out": [
        "\"contador_compromisos\""
      ],
      "stack_out": [
        "\"contador_compromisos\""
      ]
    },
    "153": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"contador_compromisos\"",
        "0"
      ]
    },
    "154": {
      "op": "app_global_put",
      "stack_out": []
    },
    "155": {
      "op": "bytec_3 // \"contador_raices\"",
      "defined_out": [
        "\"contador_raices\""
      ],
      "stack_out": [
        "\"contador_raices\""
      ]
    },
    "156": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"contador_raices\"",
        "0"
      ]
    },
    "157": {
      "op": "app_global_put",
      "stack_out": []
    },
    "158": {
      "op": "bytec 4 // \"contador_anuladores\"",
      "defined_out": [
        "\"contador_anuladores\""
      ],
      "stack_out": [
        "\"contador_anuladores\""
      ]
    },
    "160": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"contador_anuladores\"",
        "0"
      ]
    },
    "161": {
      "op": "app_global_put",
      "stack_out": []
    },
    "162": {
      "op": "bytec 6 // \"num_bloques\"",
      "defined_out": [
        "\"num_bloques\""
      ],
      "stack_out": [
        "\"num_bloques\""
      ]
    },
    "164": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"num_bloques\"",
        "0"
      ]
    },
    "165": {
      "op": "app_global_put",
      "stack_out": []
    },
    "166": {
      "op": "bytec 7 // \"tam_bloque\"",
      "defined_out": [
        "\"tam_bloque\""
      ],
      "stack_out": [
        "\"tam_bloque\""
      ]
    },
    "168": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"tam_bloque\"",
        "0"
      ]
    },
    "169": {
      "op": "app_global_put",
      "stack_out": []
    },
    "170": {
      "op": "bytec 8 // \"tam_resto\"",
      "defined_out": [
        "\"tam_resto\""
      ],
      "stack_out": [
        "\"tam_resto\""
      ]
    },
    "172": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"tam_resto\"",
        "0"
      ]
    },
    "173": {
      "op": "app_global_put",
      "stack_out": []
    },
    "174": {
      "op": "bytec 9 // \"txnId_raiz\"",
      "defined_out": [
        "\"txnId_raiz\""
      ],
      "stack_out": [
        "\"txnId_raiz\""
      ]
    },
    "176": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "\"txnId_raiz\""
      ],
      "stack_out": [
        "\"txnId_raiz\"",
        "\"\""
      ]
    },
    "178": {
      "op": "app_global_put",
      "stack_out": []
    },
    "179": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "181": {
      "op": "bz main_bare_routing@18",
      "stack_out": []
    },
    "184": {
      "op": "pushbytess 0x7757ddca 0x3a97786b 0x894b0b9e 0xc7fe93c0 0x109b6a61 0x88029dd2 0xd330fd1c 0x9c17a430 0x02a28ad5 0x7d9b3e58 0x4e812cf7 0xb9bdcec1 0x800678ec // method \"inicializar_eleccion(string,string,uint64)uint64\", method \"leer_estado_contrato()uint64\", method \"establecer_estado_contrato(uint64)uint64\", method \"abrir_registro_compromisos()void\", method \"registrar_compromiso()uint64\", method \"cerrar_registro_compromisos()uint64\", method \"abrir_registro_raices(uint64,uint64,uint64)void\", method \"registrar_raiz()uint64\", method \"cerrar_registro_raices(string)uint64\", method \"leer_datos_raices()(uint64,uint64,uint64,string)\", method \"abrir_registro_anuladores()void\", method \"registrar_anulador()uint64\", method \"cerrar_registro_anuladores()uint64\"",
      "defined_out": [
        "Method(abrir_registro_anuladores()void)",
        "Method(abrir_registro_compromisos()void)",
        "Method(abrir_registro_raices(uint64,uint64,uint64)void)",
        "Method(cerrar_registro_anuladores()uint64)",
        "Method(cerrar_registro_compromisos()uint64)",
        "Method(cerrar_registro_raices(string)uint64)",
        "Method(establecer_estado_contrato(uint64)uint64)",
        "Method(inicializar_eleccion(string,string,uint64)uint64)",
        "Method(leer_datos_raices()(uint64,uint64,uint64,string))",
        "Method(leer_estado_contrato()uint64)",
        "Method(registrar_anulador()uint64)",
        "Method(registrar_compromiso()uint64)",
        "Method(registrar_raiz()uint64)"
      ],
      "stack_out": [
        "Method(inicializar_eleccion(string,string,uint64)uint64)",
        "Method(leer_estado_contrato()uint64)",
        "Method(establecer_estado_contrato(uint64)uint64)",
        "Method(abrir_registro_compromisos()void)",
        "Method(registrar_compromiso()uint64)",
        "Method(cerrar_registro_compromisos()uint64)",
        "Method(abrir_registro_raices(uint64,uint64,uint64)void)",
        "Method(registrar_raiz()uint64)",
        "Method(cerrar_registro_raices(string)uint64)",
        "Method(leer_datos_raices()(uint64,uint64,uint64,string))",
        "Method(abrir_registro_anuladores()void)",
        "Method(registrar_anulador()uint64)",
        "Method(cerrar_registro_anuladores()uint64)"
      ]
    },
    "251": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(abrir_registro_anuladores()void)",
        "Method(abrir_registro_compromisos()void)",
        "Method(abrir_registro_raices(uint64,uint64,uint64)void)",
        "Method(cerrar_registro_anuladores()uint64)",
        "Method(cerrar_registro_compromisos()uint64)",
        "Method(cerrar_registro_raices(string)uint64)",
        "Method(establecer_estado_contrato(uint64)uint64)",
        "Method(inicializar_eleccion(string,string,uint64)uint64)",
        "Method(leer_datos_raices()(uint64,uint64,uint64,string))",
        "Method(leer_estado_contrato()uint64)",
        "Method(registrar_anulador()uint64)",
        "Method(registrar_compromiso()uint64)",
        "Method(registrar_raiz()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(inicializar_eleccion(string,string,uint64)uint64)",
        "Method(leer_estado_contrato()uint64)",
        "Method(establecer_estado_contrato(uint64)uint64)",
        "Method(abrir_registro_compromisos()void)",
        "Method(registrar_compromiso()uint64)",
        "Method(cerrar_registro_compromisos()uint64)",
        "Method(abrir_registro_raices(uint64,uint64,uint64)void)",
        "Method(registrar_raiz()uint64)",
        "Method(cerrar_registro_raices(string)uint64)",
        "Method(leer_datos_raices()(uint64,uint64,uint64,string))",
        "Method(abrir_registro_anuladores()void)",
        "Method(registrar_anulador()uint64)",
        "Method(cerrar_registro_anuladores()uint64)",
        "tmp%2#0"
      ]
    },
    "254": {
      "op": "match main_inicializar_eleccion_route@5 main_leer_estado_contrato_route@6 main_establecer_estado_contrato_route@7 main_abrir_registro_compromisos_route@8 main_registrar_compromiso_route@9 main_cerrar_registro_compromisos_route@10 main_abrir_registro_raices_route@11 main_registrar_raiz_route@12 main_cerrar_registro_raices_route@13 main_leer_datos_raices_route@14 main_abrir_registro_anuladores_route@15 main_registrar_anulador_route@16 main_cerrar_registro_anuladores_route@17",
      "stack_out": []
    },
    "282": {
      "block": "main_after_if_else@20",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "283": {
      "op": "return",
      "stack_out": []
    },
    "284": {
      "block": "main_cerrar_registro_anuladores_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "286": {
      "op": "!",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "287": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "288": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "290": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "291": {
      "callsub": "smart_contracts.voto3.contract.Voto3.cerrar_registro_anuladores",
      "op": "callsub cerrar_registro_anuladores",
      "defined_out": [
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0"
      ]
    },
    "294": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0"
      ]
    },
    "295": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0",
        "0x151f7c75"
      ]
    },
    "296": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%11#0"
      ]
    },
    "297": {
      "op": "concat",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "298": {
      "op": "log",
      "stack_out": []
    },
    "299": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "300": {
      "op": "return",
      "stack_out": []
    },
    "301": {
      "block": "main_registrar_anulador_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "303": {
      "op": "!",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "304": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "305": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "307": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "308": {
      "callsub": "smart_contracts.voto3.contract.Voto3.registrar_anulador",
      "op": "callsub registrar_anulador",
      "defined_out": [
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0"
      ]
    },
    "311": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0"
      ]
    },
    "312": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0",
        "0x151f7c75"
      ]
    },
    "313": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%10#0"
      ]
    },
    "314": {
      "op": "concat",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "315": {
      "op": "log",
      "stack_out": []
    },
    "316": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "317": {
      "op": "return",
      "stack_out": []
    },
    "318": {
      "block": "main_abrir_registro_anuladores_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "320": {
      "op": "!",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "321": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "322": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "324": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "325": {
      "callsub": "smart_contracts.voto3.contract.Voto3.abrir_registro_anuladores",
      "op": "callsub abrir_registro_anuladores"
    },
    "328": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "329": {
      "op": "return",
      "stack_out": []
    },
    "330": {
      "block": "main_leer_datos_raices_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "332": {
      "op": "!",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "333": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "334": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "336": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "337": {
      "callsub": "smart_contracts.voto3.contract.Voto3.leer_datos_raices",
      "op": "callsub leer_datos_raices",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "340": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%0#0"
      ]
    },
    "342": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%7#0"
      ]
    },
    "343": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "elements_to_encode%1#0"
      ]
    },
    "345": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "346": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "elements_to_encode%2#0"
      ]
    },
    "348": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "349": {
      "op": "dig 3",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%3#0 (copy)",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "elements_to_encode%3#0 (copy)"
      ]
    },
    "351": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%3#0",
        "length%0#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "length%0#0"
      ]
    },
    "352": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "as_bytes%0#0"
      ]
    },
    "353": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%3#0",
        "length_uint16%0#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "length_uint16%0#0"
      ]
    },
    "356": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "length_uint16%0#0",
        "elements_to_encode%3#0"
      ]
    },
    "358": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_value%0#0"
      ]
    },
    "359": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_value%0#0",
        "val_as_bytes%7#0"
      ]
    },
    "361": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%9#0",
        "encoded_value%0#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "363": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%9#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "364": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%9#0"
      ]
    },
    "366": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "367": {
      "op": "pushbytes 0x001a",
      "defined_out": [
        "0x001a",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "0x001a"
      ]
    },
    "371": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "372": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0"
      ]
    },
    "373": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0"
      ]
    },
    "374": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "0x151f7c75"
      ]
    },
    "375": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "376": {
      "op": "concat",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "377": {
      "op": "log",
      "stack_out": []
    },
    "378": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "379": {
      "op": "return",
      "stack_out": []
    },
    "380": {
      "block": "main_cerrar_registro_raices_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "382": {
      "op": "!",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "383": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "384": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "386": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "387": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "390": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "393": {
      "callsub": "smart_contracts.voto3.contract.Voto3.cerrar_registro_raices",
      "op": "callsub cerrar_registro_raices",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "396": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0"
      ]
    },
    "397": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "0x151f7c75"
      ]
    },
    "398": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%6#0"
      ]
    },
    "399": {
      "op": "concat",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "400": {
      "op": "log",
      "stack_out": []
    },
    "401": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "402": {
      "op": "return",
      "stack_out": []
    },
    "403": {
      "block": "main_registrar_raiz_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "405": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "406": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "407": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "409": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "410": {
      "callsub": "smart_contracts.voto3.contract.Voto3.registrar_raiz",
      "op": "callsub registrar_raiz",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "413": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0"
      ]
    },
    "414": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "0x151f7c75"
      ]
    },
    "415": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ]
    },
    "416": {
      "op": "concat",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "417": {
      "op": "log",
      "stack_out": []
    },
    "418": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "419": {
      "op": "return",
      "stack_out": []
    },
    "420": {
      "block": "main_abrir_registro_raices_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "422": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "423": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "424": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "426": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "427": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "430": {
      "op": "btoi",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "431": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "434": {
      "op": "btoi",
      "defined_out": [
        "tmp%42#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0"
      ]
    },
    "435": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%42#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "438": {
      "op": "btoi",
      "defined_out": [
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ]
    },
    "439": {
      "callsub": "smart_contracts.voto3.contract.Voto3.abrir_registro_raices",
      "op": "callsub abrir_registro_raices",
      "stack_out": []
    },
    "442": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "443": {
      "op": "return",
      "stack_out": []
    },
    "444": {
      "block": "main_cerrar_registro_compromisos_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "446": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "447": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "448": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "450": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "451": {
      "callsub": "smart_contracts.voto3.contract.Voto3.cerrar_registro_compromisos",
      "op": "callsub cerrar_registro_compromisos",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "454": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "455": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "456": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "457": {
      "op": "concat",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "458": {
      "op": "log",
      "stack_out": []
    },
    "459": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "460": {
      "op": "return",
      "stack_out": []
    },
    "461": {
      "block": "main_registrar_compromiso_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "463": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "464": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "465": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "467": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "468": {
      "callsub": "smart_contracts.voto3.contract.Voto3.registrar_compromiso",
      "op": "callsub registrar_compromiso",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "471": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "472": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "473": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "474": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "475": {
      "op": "log",
      "stack_out": []
    },
    "476": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "477": {
      "op": "return",
      "stack_out": []
    },
    "478": {
      "block": "main_abrir_registro_compromisos_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "480": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "481": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "482": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "484": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "485": {
      "callsub": "smart_contracts.voto3.contract.Voto3.abrir_registro_compromisos",
      "op": "callsub abrir_registro_compromisos"
    },
    "488": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "489": {
      "op": "return",
      "stack_out": []
    },
    "490": {
      "block": "main_establecer_estado_contrato_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "492": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "493": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "494": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "496": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "497": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "500": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "501": {
      "callsub": "smart_contracts.voto3.contract.Voto3.establecer_estado_contrato",
      "op": "callsub establecer_estado_contrato",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "504": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "505": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "506": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "507": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "508": {
      "op": "log",
      "stack_out": []
    },
    "509": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "510": {
      "op": "return",
      "stack_out": []
    },
    "511": {
      "block": "main_leer_estado_contrato_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "513": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "514": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "515": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "517": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "518": {
      "callsub": "smart_contracts.voto3.contract.Voto3.leer_estado_contrato",
      "op": "callsub leer_estado_contrato",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "521": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "522": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "523": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "524": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "525": {
      "op": "log",
      "stack_out": []
    },
    "526": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "527": {
      "op": "return",
      "stack_out": []
    },
    "528": {
      "block": "main_inicializar_eleccion_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "530": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "531": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "532": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "534": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "535": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "538": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "541": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "544": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "547": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "550": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "551": {
      "callsub": "smart_contracts.voto3.contract.Voto3.inicializar_eleccion",
      "op": "callsub inicializar_eleccion",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "554": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "555": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "556": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "557": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "558": {
      "op": "log",
      "stack_out": []
    },
    "559": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "560": {
      "op": "return",
      "stack_out": []
    },
    "561": {
      "block": "main_bare_routing@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "563": {
      "op": "bnz main_after_if_else@20",
      "stack_out": []
    },
    "566": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "568": {
      "op": "!",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "569": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "570": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "571": {
      "op": "return",
      "stack_out": []
    },
    "572": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.inicializar_eleccion",
      "params": {
        "asset_name#0": "bytes",
        "unit_name#0": "bytes",
        "total#0": "uint64"
      },
      "block": "inicializar_eleccion",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "575": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "577": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "579": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "580": {
      "error": "Solo el creador puede inicializar la elecci\u00f3n",
      "op": "assert // Solo el creador puede inicializar la elecci\u00f3n",
      "stack_out": []
    },
    "581": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "582": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "583": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "584": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "585": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "586": {
      "error": "El contrato ya est\u00e1 inicializado",
      "op": "assert // El contrato ya est\u00e1 inicializado",
      "stack_out": []
    },
    "587": {
      "op": "frame_dig -3",
      "defined_out": [
        "asset_name#0 (copy)"
      ],
      "stack_out": [
        "asset_name#0 (copy)"
      ]
    },
    "589": {
      "op": "len",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "590": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "32"
      ]
    },
    "592": {
      "op": "<=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "593": {
      "error": "asset_name demasiado largo",
      "op": "assert // asset_name demasiado largo",
      "stack_out": []
    },
    "594": {
      "op": "frame_dig -2",
      "defined_out": [
        "unit_name#0 (copy)"
      ],
      "stack_out": [
        "unit_name#0 (copy)"
      ]
    },
    "596": {
      "op": "len",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "597": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "8"
      ]
    },
    "599": {
      "op": "<=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "600": {
      "error": "unit_name demasiado largo",
      "op": "assert // unit_name demasiado largo",
      "stack_out": []
    },
    "601": {
      "op": "itxn_begin"
    },
    "602": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "604": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0"
      ]
    },
    "605": {
      "op": "itxn_field ConfigAssetClawback",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "607": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": []
    },
    "609": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "610": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": []
    },
    "612": {
      "op": "frame_dig -1",
      "defined_out": [
        "total#0 (copy)"
      ],
      "stack_out": [
        "total#0 (copy)"
      ]
    },
    "614": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "616": {
      "op": "frame_dig -2",
      "stack_out": [
        "unit_name#0 (copy)"
      ]
    },
    "618": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "620": {
      "op": "frame_dig -3",
      "stack_out": [
        "asset_name#0 (copy)"
      ]
    },
    "622": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "624": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "625": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "627": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "628": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "630": {
      "op": "itxn_submit"
    },
    "631": {
      "op": "bytec 5 // \"asset_id\"",
      "defined_out": [
        "\"asset_id\""
      ],
      "stack_out": [
        "\"asset_id\""
      ]
    },
    "633": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "\"asset_id\"",
        "asset_txn.CreatedAssetID#0"
      ],
      "stack_out": [
        "\"asset_id\"",
        "asset_txn.CreatedAssetID#0"
      ]
    },
    "635": {
      "op": "app_global_put",
      "stack_out": []
    },
    "636": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "637": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"estado_contrato\"",
        "1"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "1"
      ]
    },
    "638": {
      "op": "app_global_put",
      "stack_out": []
    },
    "639": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "640": {
      "op": "bytec 5 // \"asset_id\"",
      "stack_out": [
        "0",
        "\"asset_id\""
      ]
    },
    "642": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "643": {
      "error": "check self.asset_id exists",
      "op": "assert // check self.asset_id exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "644": {
      "retsub": true,
      "op": "retsub"
    },
    "645": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.leer_estado_contrato",
      "params": {},
      "block": "leer_estado_contrato",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "647": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "649": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "650": {
      "error": "Solo el creador puede leer el estado del contrato",
      "op": "assert // Solo el creador puede leer el estado del contrato",
      "stack_out": []
    },
    "651": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "652": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "653": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "654": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "655": {
      "retsub": true,
      "op": "retsub"
    },
    "656": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.establecer_estado_contrato",
      "params": {
        "nuevo_estado#0": "uint64"
      },
      "block": "establecer_estado_contrato",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "659": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "661": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "663": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "664": {
      "error": "Solo el creador puede establecer el estado del contrato",
      "op": "assert // Solo el creador puede establecer el estado del contrato",
      "stack_out": []
    },
    "665": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\""
      ],
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "666": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"estado_contrato\"",
        "nuevo_estado#0 (copy)"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "nuevo_estado#0 (copy)"
      ]
    },
    "668": {
      "op": "app_global_put",
      "stack_out": []
    },
    "669": {
      "op": "frame_dig -1",
      "stack_out": [
        "nuevo_estado#0 (copy)"
      ]
    },
    "671": {
      "retsub": true,
      "op": "retsub"
    },
    "672": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.abrir_registro_compromisos",
      "params": {},
      "block": "abrir_registro_compromisos",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "674": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "676": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "677": {
      "error": "Solo el creador puede abrir el registro de compromisos",
      "op": "assert // Solo el creador puede abrir el registro de compromisos",
      "stack_out": []
    },
    "678": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "679": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "680": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "681": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "682": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "683": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "684": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "685": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "686": {
      "op": "intc_3 // 2",
      "defined_out": [
        "\"estado_contrato\"",
        "2"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "2"
      ]
    },
    "687": {
      "op": "app_global_put",
      "stack_out": []
    },
    "688": {
      "retsub": true,
      "op": "retsub"
    },
    "689": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.registrar_compromiso",
      "params": {},
      "block": "registrar_compromiso",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "691": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "693": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "694": {
      "error": "Solo el creador puede registrar compromisos",
      "op": "assert // Solo el creador puede registrar compromisos",
      "stack_out": []
    },
    "695": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "696": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "697": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "698": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "699": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "2"
      ]
    },
    "700": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "701": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "702": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "703": {
      "op": "bytec_2 // \"contador_compromisos\"",
      "defined_out": [
        "\"contador_compromisos\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contador_compromisos\""
      ]
    },
    "704": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "current#0",
        "maybe_exists%1#0"
      ]
    },
    "705": {
      "error": "check self.contador_compromisos exists",
      "op": "assert // check self.contador_compromisos exists",
      "stack_out": [
        "current#0"
      ]
    },
    "706": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "current#0"
      ],
      "stack_out": [
        "current#0",
        "1"
      ]
    },
    "707": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "708": {
      "op": "bytec_2 // \"contador_compromisos\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"contador_compromisos\""
      ]
    },
    "709": {
      "op": "dig 1",
      "defined_out": [
        "\"contador_compromisos\"",
        "materialized_values%0#0",
        "materialized_values%0#0 (copy)"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "\"contador_compromisos\"",
        "materialized_values%0#0 (copy)"
      ]
    },
    "711": {
      "op": "app_global_put",
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "712": {
      "retsub": true,
      "op": "retsub"
    },
    "713": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.cerrar_registro_compromisos",
      "params": {},
      "block": "cerrar_registro_compromisos",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "715": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "717": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "718": {
      "error": "Solo el creador puede cerrar el registro de compromisos",
      "op": "assert // Solo el creador puede cerrar el registro de compromisos",
      "stack_out": []
    },
    "719": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "720": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "721": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "722": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "723": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "2"
      ]
    },
    "724": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "725": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "726": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "727": {
      "op": "intc_2 // 3",
      "defined_out": [
        "\"estado_contrato\"",
        "3"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "3"
      ]
    },
    "728": {
      "op": "app_global_put",
      "stack_out": []
    },
    "729": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "730": {
      "op": "bytec_2 // \"contador_compromisos\"",
      "defined_out": [
        "\"contador_compromisos\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contador_compromisos\""
      ]
    },
    "731": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "732": {
      "error": "check self.contador_compromisos exists",
      "op": "assert // check self.contador_compromisos exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "733": {
      "retsub": true,
      "op": "retsub"
    },
    "734": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.abrir_registro_raices",
      "params": {
        "num_bloques#0": "uint64",
        "tam_bloque#0": "uint64",
        "tam_resto#0": "uint64"
      },
      "block": "abrir_registro_raices",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "737": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "739": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "741": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "742": {
      "error": "Solo el creador puede abrir el registro de ra\u00edces",
      "op": "assert // Solo el creador puede abrir el registro de ra\u00edces",
      "stack_out": []
    },
    "743": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "744": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "745": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "746": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "747": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "3"
      ]
    },
    "748": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "749": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "750": {
      "op": "bytec 6 // \"num_bloques\"",
      "defined_out": [
        "\"num_bloques\""
      ],
      "stack_out": [
        "\"num_bloques\""
      ]
    },
    "752": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"num_bloques\"",
        "num_bloques#0 (copy)"
      ],
      "stack_out": [
        "\"num_bloques\"",
        "num_bloques#0 (copy)"
      ]
    },
    "754": {
      "op": "app_global_put",
      "stack_out": []
    },
    "755": {
      "op": "bytec 7 // \"tam_bloque\"",
      "defined_out": [
        "\"tam_bloque\""
      ],
      "stack_out": [
        "\"tam_bloque\""
      ]
    },
    "757": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"tam_bloque\"",
        "tam_bloque#0 (copy)"
      ],
      "stack_out": [
        "\"tam_bloque\"",
        "tam_bloque#0 (copy)"
      ]
    },
    "759": {
      "op": "app_global_put",
      "stack_out": []
    },
    "760": {
      "op": "bytec 8 // \"tam_resto\"",
      "defined_out": [
        "\"tam_resto\""
      ],
      "stack_out": [
        "\"tam_resto\""
      ]
    },
    "762": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"tam_resto\"",
        "tam_resto#0 (copy)"
      ],
      "stack_out": [
        "\"tam_resto\"",
        "tam_resto#0 (copy)"
      ]
    },
    "764": {
      "op": "app_global_put",
      "stack_out": []
    },
    "765": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "766": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "\"estado_contrato\"",
        "4"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "4"
      ]
    },
    "768": {
      "op": "app_global_put",
      "stack_out": []
    },
    "769": {
      "retsub": true,
      "op": "retsub"
    },
    "770": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.registrar_raiz",
      "params": {},
      "block": "registrar_raiz",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "772": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "774": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "775": {
      "error": "Solo el creador puede registrar ra\u00edces",
      "op": "assert // Solo el creador puede registrar ra\u00edces",
      "stack_out": []
    },
    "776": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "777": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "778": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "779": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "780": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "4"
      ]
    },
    "782": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "783": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "784": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "785": {
      "op": "bytec_3 // \"contador_raices\"",
      "defined_out": [
        "\"contador_raices\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contador_raices\""
      ]
    },
    "786": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "current#0",
        "maybe_exists%1#0"
      ]
    },
    "787": {
      "error": "check self.contador_raices exists",
      "op": "assert // check self.contador_raices exists",
      "stack_out": [
        "current#0"
      ]
    },
    "788": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "current#0"
      ],
      "stack_out": [
        "current#0",
        "1"
      ]
    },
    "789": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "790": {
      "op": "bytec_3 // \"contador_raices\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"contador_raices\""
      ]
    },
    "791": {
      "op": "dig 1",
      "defined_out": [
        "\"contador_raices\"",
        "materialized_values%0#0",
        "materialized_values%0#0 (copy)"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "\"contador_raices\"",
        "materialized_values%0#0 (copy)"
      ]
    },
    "793": {
      "op": "app_global_put",
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "794": {
      "retsub": true,
      "op": "retsub"
    },
    "795": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.cerrar_registro_raices",
      "params": {
        "txnId_raiz#0": "bytes"
      },
      "block": "cerrar_registro_raices",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "798": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "800": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "802": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "803": {
      "error": "Solo el creador puede cerrar el registro de ra\u00edces",
      "op": "assert // Solo el creador puede cerrar el registro de ra\u00edces",
      "stack_out": []
    },
    "804": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "805": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "806": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "807": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "808": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "4"
      ]
    },
    "810": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "811": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "812": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "813": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "\"estado_contrato\"",
        "5"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "5"
      ]
    },
    "815": {
      "op": "app_global_put",
      "stack_out": []
    },
    "816": {
      "op": "bytec 9 // \"txnId_raiz\"",
      "defined_out": [
        "\"txnId_raiz\""
      ],
      "stack_out": [
        "\"txnId_raiz\""
      ]
    },
    "818": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"txnId_raiz\"",
        "txnId_raiz#0 (copy)"
      ],
      "stack_out": [
        "\"txnId_raiz\"",
        "txnId_raiz#0 (copy)"
      ]
    },
    "820": {
      "op": "app_global_put",
      "stack_out": []
    },
    "821": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "822": {
      "op": "bytec_3 // \"contador_raices\"",
      "defined_out": [
        "\"contador_raices\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contador_raices\""
      ]
    },
    "823": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "824": {
      "error": "check self.contador_raices exists",
      "op": "assert // check self.contador_raices exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "825": {
      "retsub": true,
      "op": "retsub"
    },
    "826": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.leer_datos_raices",
      "params": {},
      "block": "leer_datos_raices",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "827": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "828": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "829": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "830": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "5"
      ]
    },
    "832": {
      "op": ">=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "833": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "834": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "835": {
      "op": "bytec 6 // \"num_bloques\"",
      "defined_out": [
        "\"num_bloques\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"num_bloques\""
      ]
    },
    "837": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "838": {
      "error": "check self.num_bloques exists",
      "op": "assert // check self.num_bloques exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "839": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "840": {
      "op": "bytec 7 // \"tam_bloque\"",
      "defined_out": [
        "\"tam_bloque\"",
        "0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "\"tam_bloque\""
      ]
    },
    "842": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "843": {
      "error": "check self.tam_bloque exists",
      "op": "assert // check self.tam_bloque exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "844": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "845": {
      "op": "bytec 8 // \"tam_resto\"",
      "defined_out": [
        "\"tam_resto\"",
        "0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"tam_resto\""
      ]
    },
    "847": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "848": {
      "error": "check self.tam_resto exists",
      "op": "assert // check self.tam_resto exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "849": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "850": {
      "op": "bytec 9 // \"txnId_raiz\"",
      "defined_out": [
        "\"txnId_raiz\"",
        "0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "\"txnId_raiz\""
      ]
    },
    "852": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "853": {
      "error": "check self.txnId_raiz exists",
      "op": "assert // check self.txnId_raiz exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "854": {
      "retsub": true,
      "op": "retsub"
    },
    "855": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.abrir_registro_anuladores",
      "params": {},
      "block": "abrir_registro_anuladores",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "857": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "859": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "860": {
      "error": "Solo el creador puede abrir el registro de anuladores",
      "op": "assert // Solo el creador puede abrir el registro de anuladores",
      "stack_out": []
    },
    "861": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "862": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "863": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "864": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "865": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "5"
      ]
    },
    "867": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "868": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "869": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "870": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "\"estado_contrato\"",
        "6"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "6"
      ]
    },
    "872": {
      "op": "app_global_put",
      "stack_out": []
    },
    "873": {
      "retsub": true,
      "op": "retsub"
    },
    "874": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.registrar_anulador",
      "params": {},
      "block": "registrar_anulador",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "876": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "878": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "879": {
      "error": "Solo el creador puede registrar anuladores",
      "op": "assert // Solo el creador puede registrar anuladores",
      "stack_out": []
    },
    "880": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "881": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "882": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "883": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "884": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "6"
      ]
    },
    "886": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "887": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "888": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "889": {
      "op": "bytec 4 // \"contador_anuladores\"",
      "defined_out": [
        "\"contador_anuladores\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contador_anuladores\""
      ]
    },
    "891": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "current#0",
        "maybe_exists%1#0"
      ]
    },
    "892": {
      "error": "check self.contador_anuladores exists",
      "op": "assert // check self.contador_anuladores exists",
      "stack_out": [
        "current#0"
      ]
    },
    "893": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "current#0"
      ],
      "stack_out": [
        "current#0",
        "1"
      ]
    },
    "894": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "895": {
      "op": "bytec 4 // \"contador_anuladores\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"contador_anuladores\""
      ]
    },
    "897": {
      "op": "dig 1",
      "defined_out": [
        "\"contador_anuladores\"",
        "materialized_values%0#0",
        "materialized_values%0#0 (copy)"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "\"contador_anuladores\"",
        "materialized_values%0#0 (copy)"
      ]
    },
    "899": {
      "op": "app_global_put",
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "900": {
      "retsub": true,
      "op": "retsub"
    },
    "901": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.cerrar_registro_anuladores",
      "params": {},
      "block": "cerrar_registro_anuladores",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "903": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "905": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "906": {
      "error": "Solo el creador puede cerrar el registro de anuladores",
      "op": "assert // Solo el creador puede cerrar el registro de anuladores",
      "stack_out": []
    },
    "907": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "908": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "909": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "910": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "911": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "6"
      ]
    },
    "913": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "914": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "915": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "916": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "\"estado_contrato\"",
        "7"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "7"
      ]
    },
    "918": {
      "op": "app_global_put",
      "stack_out": []
    },
    "919": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "920": {
      "op": "bytec 4 // \"contador_anuladores\"",
      "defined_out": [
        "\"contador_anuladores\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contador_anuladores\""
      ]
    },
    "922": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "923": {
      "error": "check self.contador_anuladores exists",
      "op": "assert // check self.contador_anuladores exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "924": {
      "retsub": true,
      "op": "retsub"
    }
  }
}