{
  "version": 3,
  "sources": [
    "../../voto3/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBQ;AAA4B;AAA5B;AACA;AAAuB;AAAvB;AACA;;AAA2B;AAA3B;AACA;AAAuB;AAAvB;AACA;;AAAgB;AAAhB;AAlBR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAwKK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AA7GL;;;AAAA;AAAA;;;AAAA;AA6GK;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AA9DL;;;AAAA;AA8DK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjCA;;AAAA;AAAA;AAAA;;AAAA;AAtBL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAsBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtBL;;AAAA;;;;;;;;;AAsBA;;;AAQY;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAA;AAAP;AAKO;;AAAA;AAAqB;;AAArB;AAAP;AACO;;AAAA;AAAqB;;AAArB;AAAP;AAEY;AAKA;;AACC;;;;;AAFA;;;;;;;;;;;;;;;AAJD;;;AAAA;;;AAAA;AASZ;;;;AAAA;AACA;AAAuB;AAAvB;AACO;AAAA;;AAAA;AAAA;AAAP;AAOI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAP;AAER;;;AAGY;;AAAc;;AAAd;AADJ;AAGA;AAAA;;AAAA;AACA;;AAAA;AAQI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;AAAxB;AAAP;AAGA;AAAuB;AAAvB;;AAKI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;AAAxB;AAAP;AAGA;AAAuB;AAAvB;AACO;AAAA;AAAA;AAAA;AAAP;AAKI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;AAAxB;AAAP;AAGU;AAAA;AAAA;AAAA;AACkB;AAAU;AAAV;AAA5B;AAAA;AAAA;AACA;AAKR;;;AAGY;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;AAAxB;AAAP;AAGA;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;AAAA;;AAAA;AACA;AAAuB;;AAAvB;;AAKI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAGA;AAAuB;;AAAvB;AACO;AAAA;AAAA;AAAA;AAAP;AAKI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAGU;AAAA;AAAA;AAAA;AACa;AAAU;AAAV;AAAvB;AAAA;AAAA;AACA;AAQI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAGA;AAAuB;;AAAvB;;AAKI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAGA;AAAuB;;AAAvB;AACO;AAAA;;AAAA;AAAA;AAAP;AAKI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAGU;AAAA;;AAAA;AAAA;AACiB;AAAU;AAAV;AAA3B;;AAAA;AAAA;AACA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3 2"
    },
    "7": {
      "op": "bytecblock \"estado_contrato\" 0x151f7c75 \"contador_compromisos\" \"contador_raices\" \"contador_anuladores\" \"asset_id\""
    },
    "96": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "98": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "101": {
      "op": "bytec_2 // \"contador_compromisos\"",
      "defined_out": [
        "\"contador_compromisos\""
      ],
      "stack_out": [
        "\"contador_compromisos\""
      ]
    },
    "102": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"contador_compromisos\"",
        "0"
      ],
      "stack_out": [
        "\"contador_compromisos\"",
        "0"
      ]
    },
    "103": {
      "op": "app_global_put",
      "stack_out": []
    },
    "104": {
      "op": "bytec_3 // \"contador_raices\"",
      "defined_out": [
        "\"contador_raices\""
      ],
      "stack_out": [
        "\"contador_raices\""
      ]
    },
    "105": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"contador_raices\"",
        "0"
      ]
    },
    "106": {
      "op": "app_global_put",
      "stack_out": []
    },
    "107": {
      "op": "bytec 4 // \"contador_anuladores\"",
      "defined_out": [
        "\"contador_anuladores\""
      ],
      "stack_out": [
        "\"contador_anuladores\""
      ]
    },
    "109": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"contador_anuladores\"",
        "0"
      ]
    },
    "110": {
      "op": "app_global_put",
      "stack_out": []
    },
    "111": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\""
      ],
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "112": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"estado_contrato\"",
        "0"
      ]
    },
    "113": {
      "op": "app_global_put",
      "stack_out": []
    },
    "114": {
      "op": "bytec 5 // \"asset_id\"",
      "defined_out": [
        "\"asset_id\""
      ],
      "stack_out": [
        "\"asset_id\""
      ]
    },
    "116": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"asset_id\"",
        "0"
      ]
    },
    "117": {
      "op": "app_global_put",
      "stack_out": []
    },
    "118": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "120": {
      "op": "bz main_bare_routing@17",
      "stack_out": []
    },
    "123": {
      "op": "pushbytess 0x7757ddca 0x3a97786b 0x894b0b9e 0xc7fe93c0 0x88029dd2 0x109b6a61 0x3a3a7a44 0x694e96e1 0x9c17a430 0x4e812cf7 0x800678ec 0xb9bdcec1 // method \"inicializar_eleccion(string,string,uint64)uint64\", method \"leer_estado_contrato()uint64\", method \"establecer_estado_contrato(uint64)uint64\", method \"abrir_registro_compromisos()void\", method \"cerrar_registro_compromisos()uint64\", method \"registrar_compromiso()uint64\", method \"abrir_registro_raices(uint64,uint64)void\", method \"cerrar_registro_raices()uint64\", method \"registrar_raiz()uint64\", method \"abrir_registro_anuladores()void\", method \"cerrar_registro_anuladores()uint64\", method \"registrar_anulador()uint64\"",
      "defined_out": [
        "Method(abrir_registro_anuladores()void)",
        "Method(abrir_registro_compromisos()void)",
        "Method(abrir_registro_raices(uint64,uint64)void)",
        "Method(cerrar_registro_anuladores()uint64)",
        "Method(cerrar_registro_compromisos()uint64)",
        "Method(cerrar_registro_raices()uint64)",
        "Method(establecer_estado_contrato(uint64)uint64)",
        "Method(inicializar_eleccion(string,string,uint64)uint64)",
        "Method(leer_estado_contrato()uint64)",
        "Method(registrar_anulador()uint64)",
        "Method(registrar_compromiso()uint64)",
        "Method(registrar_raiz()uint64)"
      ],
      "stack_out": [
        "Method(inicializar_eleccion(string,string,uint64)uint64)",
        "Method(leer_estado_contrato()uint64)",
        "Method(establecer_estado_contrato(uint64)uint64)",
        "Method(abrir_registro_compromisos()void)",
        "Method(cerrar_registro_compromisos()uint64)",
        "Method(registrar_compromiso()uint64)",
        "Method(abrir_registro_raices(uint64,uint64)void)",
        "Method(cerrar_registro_raices()uint64)",
        "Method(registrar_raiz()uint64)",
        "Method(abrir_registro_anuladores()void)",
        "Method(cerrar_registro_anuladores()uint64)",
        "Method(registrar_anulador()uint64)"
      ]
    },
    "185": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(abrir_registro_anuladores()void)",
        "Method(abrir_registro_compromisos()void)",
        "Method(abrir_registro_raices(uint64,uint64)void)",
        "Method(cerrar_registro_anuladores()uint64)",
        "Method(cerrar_registro_compromisos()uint64)",
        "Method(cerrar_registro_raices()uint64)",
        "Method(establecer_estado_contrato(uint64)uint64)",
        "Method(inicializar_eleccion(string,string,uint64)uint64)",
        "Method(leer_estado_contrato()uint64)",
        "Method(registrar_anulador()uint64)",
        "Method(registrar_compromiso()uint64)",
        "Method(registrar_raiz()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(inicializar_eleccion(string,string,uint64)uint64)",
        "Method(leer_estado_contrato()uint64)",
        "Method(establecer_estado_contrato(uint64)uint64)",
        "Method(abrir_registro_compromisos()void)",
        "Method(cerrar_registro_compromisos()uint64)",
        "Method(registrar_compromiso()uint64)",
        "Method(abrir_registro_raices(uint64,uint64)void)",
        "Method(cerrar_registro_raices()uint64)",
        "Method(registrar_raiz()uint64)",
        "Method(abrir_registro_anuladores()void)",
        "Method(cerrar_registro_anuladores()uint64)",
        "Method(registrar_anulador()uint64)",
        "tmp%2#0"
      ]
    },
    "188": {
      "op": "match main_inicializar_eleccion_route@5 main_leer_estado_contrato_route@6 main_establecer_estado_contrato_route@7 main_abrir_registro_compromisos_route@8 main_cerrar_registro_compromisos_route@9 main_registrar_compromiso_route@10 main_abrir_registro_raices_route@11 main_cerrar_registro_raices_route@12 main_registrar_raiz_route@13 main_abrir_registro_anuladores_route@14 main_cerrar_registro_anuladores_route@15 main_registrar_anulador_route@16",
      "stack_out": []
    },
    "214": {
      "block": "main_after_if_else@19",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "215": {
      "op": "return",
      "stack_out": []
    },
    "216": {
      "block": "main_registrar_anulador_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "218": {
      "op": "!",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "219": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "220": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "222": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "223": {
      "callsub": "smart_contracts.voto3.contract.Voto3.registrar_anulador",
      "op": "callsub registrar_anulador",
      "defined_out": [
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0"
      ]
    },
    "226": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0"
      ]
    },
    "227": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0",
        "0x151f7c75"
      ]
    },
    "228": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%8#0"
      ]
    },
    "229": {
      "op": "concat",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "230": {
      "op": "log",
      "stack_out": []
    },
    "231": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "232": {
      "op": "return",
      "stack_out": []
    },
    "233": {
      "block": "main_cerrar_registro_anuladores_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "235": {
      "op": "!",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "236": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "237": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "239": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "240": {
      "callsub": "smart_contracts.voto3.contract.Voto3.cerrar_registro_anuladores",
      "op": "callsub cerrar_registro_anuladores",
      "defined_out": [
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0"
      ]
    },
    "243": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0"
      ]
    },
    "244": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0",
        "0x151f7c75"
      ]
    },
    "245": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%7#0"
      ]
    },
    "246": {
      "op": "concat",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "247": {
      "op": "log",
      "stack_out": []
    },
    "248": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "249": {
      "op": "return",
      "stack_out": []
    },
    "250": {
      "block": "main_abrir_registro_anuladores_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "252": {
      "op": "!",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "253": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "254": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "256": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "257": {
      "callsub": "smart_contracts.voto3.contract.Voto3.abrir_registro_anuladores",
      "op": "callsub abrir_registro_anuladores"
    },
    "260": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "261": {
      "op": "return",
      "stack_out": []
    },
    "262": {
      "block": "main_registrar_raiz_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "264": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "265": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "266": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "268": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "269": {
      "callsub": "smart_contracts.voto3.contract.Voto3.registrar_raiz",
      "op": "callsub registrar_raiz",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "272": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0"
      ]
    },
    "273": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "0x151f7c75"
      ]
    },
    "274": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%6#0"
      ]
    },
    "275": {
      "op": "concat",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "276": {
      "op": "log",
      "stack_out": []
    },
    "277": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "278": {
      "op": "return",
      "stack_out": []
    },
    "279": {
      "block": "main_cerrar_registro_raices_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "281": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "282": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "283": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "285": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "286": {
      "callsub": "smart_contracts.voto3.contract.Voto3.cerrar_registro_raices",
      "op": "callsub cerrar_registro_raices",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "289": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0"
      ]
    },
    "290": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "0x151f7c75"
      ]
    },
    "291": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ]
    },
    "292": {
      "op": "concat",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "293": {
      "op": "log",
      "stack_out": []
    },
    "294": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "295": {
      "op": "return",
      "stack_out": []
    },
    "296": {
      "block": "main_abrir_registro_raices_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "298": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "299": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "300": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "302": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "303": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "306": {
      "op": "btoi",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "307": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "310": {
      "op": "btoi",
      "defined_out": [
        "tmp%42#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0"
      ]
    },
    "311": {
      "callsub": "smart_contracts.voto3.contract.Voto3.abrir_registro_raices",
      "op": "callsub abrir_registro_raices",
      "stack_out": []
    },
    "314": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "315": {
      "op": "return",
      "stack_out": []
    },
    "316": {
      "block": "main_registrar_compromiso_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "318": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "319": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "320": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "322": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "323": {
      "callsub": "smart_contracts.voto3.contract.Voto3.registrar_compromiso",
      "op": "callsub registrar_compromiso",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "326": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "327": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "328": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "329": {
      "op": "concat",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "330": {
      "op": "log",
      "stack_out": []
    },
    "331": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "332": {
      "op": "return",
      "stack_out": []
    },
    "333": {
      "block": "main_cerrar_registro_compromisos_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "335": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "336": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "337": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "339": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "340": {
      "callsub": "smart_contracts.voto3.contract.Voto3.cerrar_registro_compromisos",
      "op": "callsub cerrar_registro_compromisos",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "343": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "344": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "345": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "346": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "347": {
      "op": "log",
      "stack_out": []
    },
    "348": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "349": {
      "op": "return",
      "stack_out": []
    },
    "350": {
      "block": "main_abrir_registro_compromisos_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "352": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "353": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "354": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "356": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "357": {
      "callsub": "smart_contracts.voto3.contract.Voto3.abrir_registro_compromisos",
      "op": "callsub abrir_registro_compromisos"
    },
    "360": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "361": {
      "op": "return",
      "stack_out": []
    },
    "362": {
      "block": "main_establecer_estado_contrato_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "364": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "365": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "366": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "368": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "369": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "372": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "373": {
      "callsub": "smart_contracts.voto3.contract.Voto3.establecer_estado_contrato",
      "op": "callsub establecer_estado_contrato",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "376": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "377": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "378": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "379": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "380": {
      "op": "log",
      "stack_out": []
    },
    "381": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "382": {
      "op": "return",
      "stack_out": []
    },
    "383": {
      "block": "main_leer_estado_contrato_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "385": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "386": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "387": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "389": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "390": {
      "callsub": "smart_contracts.voto3.contract.Voto3.leer_estado_contrato",
      "op": "callsub leer_estado_contrato",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "393": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "394": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "395": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "396": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "397": {
      "op": "log",
      "stack_out": []
    },
    "398": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "399": {
      "op": "return",
      "stack_out": []
    },
    "400": {
      "block": "main_inicializar_eleccion_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "402": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "403": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "404": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "406": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "407": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "410": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "413": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "416": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "419": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "422": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "423": {
      "callsub": "smart_contracts.voto3.contract.Voto3.inicializar_eleccion",
      "op": "callsub inicializar_eleccion",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "426": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "427": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "428": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "429": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "430": {
      "op": "log",
      "stack_out": []
    },
    "431": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "432": {
      "op": "return",
      "stack_out": []
    },
    "433": {
      "block": "main_bare_routing@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "435": {
      "op": "bnz main_after_if_else@19",
      "stack_out": []
    },
    "438": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "440": {
      "op": "!",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "441": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "442": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "443": {
      "op": "return",
      "stack_out": []
    },
    "444": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.inicializar_eleccion",
      "params": {
        "asset_name#0": "bytes",
        "unit_name#0": "bytes",
        "total#0": "uint64"
      },
      "block": "inicializar_eleccion",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "447": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "449": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "451": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "452": {
      "error": "Solo el creador puede inicializar la elecci\u00f3n",
      "op": "assert // Solo el creador puede inicializar la elecci\u00f3n",
      "stack_out": []
    },
    "453": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "454": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "455": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "456": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "457": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "458": {
      "error": "El contrato ya est\u00e1 inicializado",
      "op": "assert // El contrato ya est\u00e1 inicializado",
      "stack_out": []
    },
    "459": {
      "op": "frame_dig -3",
      "defined_out": [
        "asset_name#0 (copy)"
      ],
      "stack_out": [
        "asset_name#0 (copy)"
      ]
    },
    "461": {
      "op": "len",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "462": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "32"
      ]
    },
    "464": {
      "op": "<=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "465": {
      "error": "asset_name demasiado largo",
      "op": "assert // asset_name demasiado largo",
      "stack_out": []
    },
    "466": {
      "op": "frame_dig -2",
      "defined_out": [
        "unit_name#0 (copy)"
      ],
      "stack_out": [
        "unit_name#0 (copy)"
      ]
    },
    "468": {
      "op": "len",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "469": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "8"
      ]
    },
    "471": {
      "op": "<=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "472": {
      "error": "unit_name demasiado largo",
      "op": "assert // unit_name demasiado largo",
      "stack_out": []
    },
    "473": {
      "op": "itxn_begin"
    },
    "474": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "476": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0"
      ]
    },
    "477": {
      "op": "itxn_field ConfigAssetClawback",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "479": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": []
    },
    "481": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "482": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": []
    },
    "484": {
      "op": "frame_dig -1",
      "defined_out": [
        "total#0 (copy)"
      ],
      "stack_out": [
        "total#0 (copy)"
      ]
    },
    "486": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "488": {
      "op": "frame_dig -2",
      "stack_out": [
        "unit_name#0 (copy)"
      ]
    },
    "490": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "492": {
      "op": "frame_dig -3",
      "stack_out": [
        "asset_name#0 (copy)"
      ]
    },
    "494": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "496": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "497": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "499": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "500": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "502": {
      "op": "itxn_submit"
    },
    "503": {
      "op": "bytec 5 // \"asset_id\"",
      "defined_out": [
        "\"asset_id\""
      ],
      "stack_out": [
        "\"asset_id\""
      ]
    },
    "505": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "\"asset_id\"",
        "asset_txn.CreatedAssetID#0"
      ],
      "stack_out": [
        "\"asset_id\"",
        "asset_txn.CreatedAssetID#0"
      ]
    },
    "507": {
      "op": "app_global_put",
      "stack_out": []
    },
    "508": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "509": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"estado_contrato\"",
        "1"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "1"
      ]
    },
    "510": {
      "op": "app_global_put",
      "stack_out": []
    },
    "511": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "512": {
      "op": "bytec 5 // \"asset_id\"",
      "stack_out": [
        "0",
        "\"asset_id\""
      ]
    },
    "514": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "515": {
      "error": "check self.asset_id exists",
      "op": "assert // check self.asset_id exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "516": {
      "retsub": true,
      "op": "retsub"
    },
    "517": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.leer_estado_contrato",
      "params": {},
      "block": "leer_estado_contrato",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "519": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "521": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "522": {
      "error": "Solo el creador puede leer el estado del contrato",
      "op": "assert // Solo el creador puede leer el estado del contrato",
      "stack_out": []
    },
    "523": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "524": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "525": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "526": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "527": {
      "retsub": true,
      "op": "retsub"
    },
    "528": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.establecer_estado_contrato",
      "params": {
        "nuevo_estado#0": "uint64"
      },
      "block": "establecer_estado_contrato",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "531": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "533": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "535": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "536": {
      "error": "Solo el creador puede establecer el estado del contrato",
      "op": "assert // Solo el creador puede establecer el estado del contrato",
      "stack_out": []
    },
    "537": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\""
      ],
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "538": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"estado_contrato\"",
        "nuevo_estado#0 (copy)"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "nuevo_estado#0 (copy)"
      ]
    },
    "540": {
      "op": "app_global_put",
      "stack_out": []
    },
    "541": {
      "op": "frame_dig -1",
      "stack_out": [
        "nuevo_estado#0 (copy)"
      ]
    },
    "543": {
      "retsub": true,
      "op": "retsub"
    },
    "544": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.abrir_registro_compromisos",
      "params": {},
      "block": "abrir_registro_compromisos",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "546": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "548": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "549": {
      "error": "Solo el creador puede abrir el registro de compromisos",
      "op": "assert // Solo el creador puede abrir el registro de compromisos",
      "stack_out": []
    },
    "550": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "551": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "552": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "553": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "554": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "555": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "556": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "557": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "558": {
      "op": "intc_3 // 2",
      "defined_out": [
        "\"estado_contrato\"",
        "2"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "2"
      ]
    },
    "559": {
      "op": "app_global_put",
      "stack_out": []
    },
    "560": {
      "retsub": true,
      "op": "retsub"
    },
    "561": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.cerrar_registro_compromisos",
      "params": {},
      "block": "cerrar_registro_compromisos",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "563": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "565": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "566": {
      "error": "Solo el creador puede cerrar el registro de compromisos",
      "op": "assert // Solo el creador puede cerrar el registro de compromisos",
      "stack_out": []
    },
    "567": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "568": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "569": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "570": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "571": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "2"
      ]
    },
    "572": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "573": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "574": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "575": {
      "op": "intc_2 // 3",
      "defined_out": [
        "\"estado_contrato\"",
        "3"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "3"
      ]
    },
    "576": {
      "op": "app_global_put",
      "stack_out": []
    },
    "577": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "578": {
      "op": "bytec_2 // \"contador_compromisos\"",
      "defined_out": [
        "\"contador_compromisos\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contador_compromisos\""
      ]
    },
    "579": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "580": {
      "error": "check self.contador_compromisos exists",
      "op": "assert // check self.contador_compromisos exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "581": {
      "retsub": true,
      "op": "retsub"
    },
    "582": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.registrar_compromiso",
      "params": {},
      "block": "registrar_compromiso",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "584": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "586": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "587": {
      "error": "Solo el creador puede registrar compromisos",
      "op": "assert // Solo el creador puede registrar compromisos",
      "stack_out": []
    },
    "588": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "589": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "590": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "591": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "592": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "2"
      ]
    },
    "593": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "594": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "595": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "596": {
      "op": "bytec_2 // \"contador_compromisos\"",
      "defined_out": [
        "\"contador_compromisos\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contador_compromisos\""
      ]
    },
    "597": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "current#0",
        "maybe_exists%1#0"
      ]
    },
    "598": {
      "error": "check self.contador_compromisos exists",
      "op": "assert // check self.contador_compromisos exists",
      "stack_out": [
        "current#0"
      ]
    },
    "599": {
      "op": "dup",
      "defined_out": [
        "current#0",
        "current#0 (copy)"
      ],
      "stack_out": [
        "current#0",
        "current#0 (copy)"
      ]
    },
    "600": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "current#0",
        "current#0 (copy)"
      ],
      "stack_out": [
        "current#0",
        "current#0 (copy)",
        "1"
      ]
    },
    "601": {
      "op": "+",
      "defined_out": [
        "current#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "current#0",
        "materialized_values%0#0"
      ]
    },
    "602": {
      "op": "bytec_2 // \"contador_compromisos\"",
      "stack_out": [
        "current#0",
        "materialized_values%0#0",
        "\"contador_compromisos\""
      ]
    },
    "603": {
      "op": "swap",
      "stack_out": [
        "current#0",
        "\"contador_compromisos\"",
        "materialized_values%0#0"
      ]
    },
    "604": {
      "op": "app_global_put",
      "stack_out": [
        "current#0"
      ]
    },
    "605": {
      "retsub": true,
      "op": "retsub"
    },
    "606": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.abrir_registro_raices",
      "params": {
        "bloques_zk#0": "uint64",
        "resto_zk#0": "uint64"
      },
      "block": "abrir_registro_raices",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "609": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "611": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "613": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "614": {
      "error": "Solo el creador puede abrir el registro de ra\u00edces",
      "op": "assert // Solo el creador puede abrir el registro de ra\u00edces",
      "stack_out": []
    },
    "615": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "616": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "617": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "618": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "619": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "3"
      ]
    },
    "620": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "621": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "622": {
      "op": "pushbytes \"bloques_zk\"",
      "defined_out": [
        "\"bloques_zk\""
      ],
      "stack_out": [
        "\"bloques_zk\""
      ]
    },
    "634": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"bloques_zk\"",
        "bloques_zk#0 (copy)"
      ],
      "stack_out": [
        "\"bloques_zk\"",
        "bloques_zk#0 (copy)"
      ]
    },
    "636": {
      "op": "app_global_put",
      "stack_out": []
    },
    "637": {
      "op": "pushbytes \"resto_zk\"",
      "defined_out": [
        "\"resto_zk\""
      ],
      "stack_out": [
        "\"resto_zk\""
      ]
    },
    "647": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"resto_zk\"",
        "resto_zk#0 (copy)"
      ],
      "stack_out": [
        "\"resto_zk\"",
        "resto_zk#0 (copy)"
      ]
    },
    "649": {
      "op": "app_global_put",
      "stack_out": []
    },
    "650": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "651": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "\"estado_contrato\"",
        "4"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "4"
      ]
    },
    "653": {
      "op": "app_global_put",
      "stack_out": []
    },
    "654": {
      "retsub": true,
      "op": "retsub"
    },
    "655": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.cerrar_registro_raices",
      "params": {},
      "block": "cerrar_registro_raices",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "657": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "659": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "660": {
      "error": "Solo el creador puede cerrar el registro de ra\u00edces",
      "op": "assert // Solo el creador puede cerrar el registro de ra\u00edces",
      "stack_out": []
    },
    "661": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "662": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "663": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "664": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "665": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "4"
      ]
    },
    "667": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "668": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "669": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "670": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "\"estado_contrato\"",
        "5"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "5"
      ]
    },
    "672": {
      "op": "app_global_put",
      "stack_out": []
    },
    "673": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "674": {
      "op": "bytec_3 // \"contador_raices\"",
      "defined_out": [
        "\"contador_raices\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contador_raices\""
      ]
    },
    "675": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "676": {
      "error": "check self.contador_raices exists",
      "op": "assert // check self.contador_raices exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "677": {
      "retsub": true,
      "op": "retsub"
    },
    "678": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.registrar_raiz",
      "params": {},
      "block": "registrar_raiz",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "680": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "682": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "683": {
      "error": "Solo el creador puede registrar ra\u00edces",
      "op": "assert // Solo el creador puede registrar ra\u00edces",
      "stack_out": []
    },
    "684": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "685": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "686": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "687": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "688": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "4"
      ]
    },
    "690": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "691": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "692": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "693": {
      "op": "bytec_3 // \"contador_raices\"",
      "defined_out": [
        "\"contador_raices\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contador_raices\""
      ]
    },
    "694": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "current#0",
        "maybe_exists%1#0"
      ]
    },
    "695": {
      "error": "check self.contador_raices exists",
      "op": "assert // check self.contador_raices exists",
      "stack_out": [
        "current#0"
      ]
    },
    "696": {
      "op": "dup",
      "defined_out": [
        "current#0",
        "current#0 (copy)"
      ],
      "stack_out": [
        "current#0",
        "current#0 (copy)"
      ]
    },
    "697": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "current#0",
        "current#0 (copy)"
      ],
      "stack_out": [
        "current#0",
        "current#0 (copy)",
        "1"
      ]
    },
    "698": {
      "op": "+",
      "defined_out": [
        "current#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "current#0",
        "materialized_values%0#0"
      ]
    },
    "699": {
      "op": "bytec_3 // \"contador_raices\"",
      "stack_out": [
        "current#0",
        "materialized_values%0#0",
        "\"contador_raices\""
      ]
    },
    "700": {
      "op": "swap",
      "stack_out": [
        "current#0",
        "\"contador_raices\"",
        "materialized_values%0#0"
      ]
    },
    "701": {
      "op": "app_global_put",
      "stack_out": [
        "current#0"
      ]
    },
    "702": {
      "retsub": true,
      "op": "retsub"
    },
    "703": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.abrir_registro_anuladores",
      "params": {},
      "block": "abrir_registro_anuladores",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "705": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "707": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "708": {
      "error": "Solo el creador puede abrir el registro de anuladores",
      "op": "assert // Solo el creador puede abrir el registro de anuladores",
      "stack_out": []
    },
    "709": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "710": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "711": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "712": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "713": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "5"
      ]
    },
    "715": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "716": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "717": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "718": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "\"estado_contrato\"",
        "6"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "6"
      ]
    },
    "720": {
      "op": "app_global_put",
      "stack_out": []
    },
    "721": {
      "retsub": true,
      "op": "retsub"
    },
    "722": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.cerrar_registro_anuladores",
      "params": {},
      "block": "cerrar_registro_anuladores",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "724": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "726": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "727": {
      "error": "Solo el creador puede cerrar el registro de anuladores",
      "op": "assert // Solo el creador puede cerrar el registro de anuladores",
      "stack_out": []
    },
    "728": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "729": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "730": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "731": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "732": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "6"
      ]
    },
    "734": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "735": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "736": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "737": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "\"estado_contrato\"",
        "7"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "7"
      ]
    },
    "739": {
      "op": "app_global_put",
      "stack_out": []
    },
    "740": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "741": {
      "op": "bytec 4 // \"contador_anuladores\"",
      "defined_out": [
        "\"contador_anuladores\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contador_anuladores\""
      ]
    },
    "743": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "744": {
      "error": "check self.contador_anuladores exists",
      "op": "assert // check self.contador_anuladores exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "745": {
      "retsub": true,
      "op": "retsub"
    },
    "746": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.registrar_anulador",
      "params": {},
      "block": "registrar_anulador",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "748": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "750": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "751": {
      "error": "Solo el creador puede registrar anuladores",
      "op": "assert // Solo el creador puede registrar anuladores",
      "stack_out": []
    },
    "752": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "753": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "754": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "755": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "756": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "6"
      ]
    },
    "758": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "759": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "760": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "761": {
      "op": "bytec 4 // \"contador_anuladores\"",
      "defined_out": [
        "\"contador_anuladores\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contador_anuladores\""
      ]
    },
    "763": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "current#0",
        "maybe_exists%1#0"
      ]
    },
    "764": {
      "error": "check self.contador_anuladores exists",
      "op": "assert // check self.contador_anuladores exists",
      "stack_out": [
        "current#0"
      ]
    },
    "765": {
      "op": "dup",
      "defined_out": [
        "current#0",
        "current#0 (copy)"
      ],
      "stack_out": [
        "current#0",
        "current#0 (copy)"
      ]
    },
    "766": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "current#0",
        "current#0 (copy)"
      ],
      "stack_out": [
        "current#0",
        "current#0 (copy)",
        "1"
      ]
    },
    "767": {
      "op": "+",
      "defined_out": [
        "current#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "current#0",
        "materialized_values%0#0"
      ]
    },
    "768": {
      "op": "bytec 4 // \"contador_anuladores\"",
      "stack_out": [
        "current#0",
        "materialized_values%0#0",
        "\"contador_anuladores\""
      ]
    },
    "770": {
      "op": "swap",
      "stack_out": [
        "current#0",
        "\"contador_anuladores\"",
        "materialized_values%0#0"
      ]
    },
    "771": {
      "op": "app_global_put",
      "stack_out": [
        "current#0"
      ]
    },
    "772": {
      "retsub": true,
      "op": "retsub"
    }
  }
}