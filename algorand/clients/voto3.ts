/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Voto3","structs":{},"methods":[{"name":"abrir_registro_compromisos","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"cerrar_registro_compromisos","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"registrar_compromiso","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"abrir_registro_raices","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"cerrar_registro_raices","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"registrar_raiz","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"abrir_registro_anuladores","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"cerrar_registro_anuladores","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"registrar_anulador","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":9,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"contador_compromisos":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y29udGFkb3JfY29tcHJvbWlzb3M="},"contador_raices":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y29udGFkb3JfcmFpY2Vz"},"contador_anuladores":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y29udGFkb3JfYW51bGFkb3Jlcw=="},"registro_compromisos_abierto":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmVnaXN0cm9fY29tcHJvbWlzb3NfYWJpZXJ0bw=="},"registro_compromisos_cerrado":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmVnaXN0cm9fY29tcHJvbWlzb3NfY2VycmFkbw=="},"registro_raices_abierto":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmVnaXN0cm9fcmFpY2VzX2FiaWVydG8="},"registro_raices_cerrado":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmVnaXN0cm9fcmFpY2VzX2NlcnJhZG8="},"registro_anuladores_abierto":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmVnaXN0cm9fYW51bGFkb3Jlc19hYmllcnRv"},"registro_anuladores_cerrado":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmVnaXN0cm9fYW51bGFkb3Jlc19jZXJyYWRv"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[710],"errorMessage":"El registro de anuladores no está abierto"},{"pc":[666,716],"errorMessage":"El registro de anuladores ya fue cerrado"},{"pc":[523,550],"errorMessage":"El registro de compromisos no está abierto"},{"pc":[580],"errorMessage":"El registro de compromisos no está cerrado"},{"pc":[506,529,556],"errorMessage":"El registro de compromisos ya fue cerrado"},{"pc":[630],"errorMessage":"El registro de raíces no está abierto"},{"pc":[603,660,683],"errorMessage":"El registro de raíces no está cerrado"},{"pc":[586,609,636,689],"errorMessage":"El registro de raíces ya fue cerrado"},{"pc":[349,366,383,395,412,429,441,458,475],"errorMessage":"OnCompletion is not NoOp"},{"pc":[655],"errorMessage":"Solo el creador puede abrir el registro de anuladores"},{"pc":[500],"errorMessage":"Solo el creador puede abrir el registro de compromisos"},{"pc":[575],"errorMessage":"Solo el creador puede abrir el registro de raíces"},{"pc":[677],"errorMessage":"Solo el creador puede cerrar el registro de anuladores"},{"pc":[517],"errorMessage":"Solo el creador puede cerrar el registro de compromisos"},{"pc":[597],"errorMessage":"Solo el creador puede cerrar el registro de raíces"},{"pc":[704],"errorMessage":"Solo el creador puede registrar anuladores"},{"pc":[544],"errorMessage":"Solo el creador puede registrar compromisos"},{"pc":[624],"errorMessage":"Solo el creador puede registrar raíces"},{"pc":[492],"errorMessage":"can only call when creating"},{"pc":[352,369,386,398,415,432,444,461,478],"errorMessage":"can only call when not creating"},{"pc":[697,721],"errorMessage":"check self.contador_anuladores exists"},{"pc":[537,561],"errorMessage":"check self.contador_compromisos exists"},{"pc":[617,641],"errorMessage":"check self.contador_raices exists"},{"pc":[682,709],"errorMessage":"check self.registro_anuladores_abierto exists"},{"pc":[664,687,714],"errorMessage":"check self.registro_anuladores_cerrado exists"},{"pc":[522,549],"errorMessage":"check self.registro_compromisos_abierto exists"},{"pc":[504,527,554,579],"errorMessage":"check self.registro_compromisos_cerrado exists"},{"pc":[602,629],"errorMessage":"check self.registro_raices_abierto exists"},{"pc":[584,607,634,659],"errorMessage":"check self.registro_raices_cerrado exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiACAAEmChxyZWdpc3Ryb19jb21wcm9taXNvc19jZXJyYWRvF3JlZ2lzdHJvX3JhaWNlc19jZXJyYWRvBBUffHUbcmVnaXN0cm9fYW51bGFkb3Jlc19jZXJyYWRvFGNvbnRhZG9yX2NvbXByb21pc29zD2NvbnRhZG9yX3JhaWNlcxNjb250YWRvcl9hbnVsYWRvcmVzHHJlZ2lzdHJvX2NvbXByb21pc29zX2FiaWVydG8XcmVnaXN0cm9fcmFpY2VzX2FiaWVydG8bcmVnaXN0cm9fYW51bGFkb3Jlc19hYmllcnRvMRhAACEnBCJnJwUiZycGImcnByJnKCJnJwgiZykiZycJImcrImcxG0EA0oIJBMf+k8AEiAKd0gQQm2phBJp+dlEEaU6W4QScF6QwBE6BLPcEgAZ47AS5vc7BNhoAjgkAgABvAF4AUgBBADAAJAATAAIiQzEZFEQxGESIAVcWKkxQsCNDMRkURDEYRIgBKxYqTFCwI0MxGRREMRhEiAEEI0MxGRREMRhEiADZFipMULAjQzEZFEQxGESIAK0WKkxQsCNDMRkURDEYRIgAhiNDMRkURDEYRIgAWxYqTFCwI0MxGRREMRhEiAAvFipMULAjQzEZFEQxGESIAA0jQzEZQP9vMRgURCNDMQAyCRJEIihlRBREJwcjZ4kxADIJEkQiJwdlREQiKGVEFEQoI2ciJwRlRIkxADIJEkQiJwdlREQiKGVEFEQiJwRlREkjCCcETGeJMQAyCRJEIihlREQiKWVEFEQnCCNniTEAMgkSRCInCGVERCIpZUQURCkjZyInBWVEiTEAMgkSRCInCGVERCIpZUQURCInBWVESSMIJwVMZ4kxADIJEkQiKWVERCIrZUQURCcJI2eJMQAyCRJEIicJZUREIitlRBREKyNnIicGZUSJMQAyCRJEIicJZUREIitlRBREIicGZURJIwgnBkxniQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":9,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Voto3 contract
 */
export type Voto3Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'abrir_registro_compromisos()void': Record<string, never>
    'cerrar_registro_compromisos()uint64': Record<string, never>
    'registrar_compromiso()uint64': Record<string, never>
    'abrir_registro_raices()void': Record<string, never>
    'cerrar_registro_raices()uint64': Record<string, never>
    'registrar_raiz()uint64': Record<string, never>
    'abrir_registro_anuladores()void': Record<string, never>
    'cerrar_registro_anuladores()uint64': Record<string, never>
    'registrar_anulador()uint64': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'abrir_registro_compromisos()void': []
    'cerrar_registro_compromisos()uint64': []
    'registrar_compromiso()uint64': []
    'abrir_registro_raices()void': []
    'cerrar_registro_raices()uint64': []
    'registrar_raiz()uint64': []
    'abrir_registro_anuladores()void': []
    'cerrar_registro_anuladores()uint64': []
    'registrar_anulador()uint64': []
  }
}

/**
 * The return type for each method
 */
export type Voto3Returns = {
  'abrir_registro_compromisos()void': void
  'cerrar_registro_compromisos()uint64': bigint
  'registrar_compromiso()uint64': bigint
  'abrir_registro_raices()void': void
  'cerrar_registro_raices()uint64': bigint
  'registrar_raiz()uint64': bigint
  'abrir_registro_anuladores()void': void
  'cerrar_registro_anuladores()uint64': bigint
  'registrar_anulador()uint64': bigint
}

/**
 * Defines the types of available calls and state of the Voto3 smart contract.
 */
export type Voto3Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'abrir_registro_compromisos()void' | 'abrir_registro_compromisos', {
      argsObj: Voto3Args['obj']['abrir_registro_compromisos()void']
      argsTuple: Voto3Args['tuple']['abrir_registro_compromisos()void']
      returns: Voto3Returns['abrir_registro_compromisos()void']
    }>
    & Record<'cerrar_registro_compromisos()uint64' | 'cerrar_registro_compromisos', {
      argsObj: Voto3Args['obj']['cerrar_registro_compromisos()uint64']
      argsTuple: Voto3Args['tuple']['cerrar_registro_compromisos()uint64']
      returns: Voto3Returns['cerrar_registro_compromisos()uint64']
    }>
    & Record<'registrar_compromiso()uint64' | 'registrar_compromiso', {
      argsObj: Voto3Args['obj']['registrar_compromiso()uint64']
      argsTuple: Voto3Args['tuple']['registrar_compromiso()uint64']
      returns: Voto3Returns['registrar_compromiso()uint64']
    }>
    & Record<'abrir_registro_raices()void' | 'abrir_registro_raices', {
      argsObj: Voto3Args['obj']['abrir_registro_raices()void']
      argsTuple: Voto3Args['tuple']['abrir_registro_raices()void']
      returns: Voto3Returns['abrir_registro_raices()void']
    }>
    & Record<'cerrar_registro_raices()uint64' | 'cerrar_registro_raices', {
      argsObj: Voto3Args['obj']['cerrar_registro_raices()uint64']
      argsTuple: Voto3Args['tuple']['cerrar_registro_raices()uint64']
      returns: Voto3Returns['cerrar_registro_raices()uint64']
    }>
    & Record<'registrar_raiz()uint64' | 'registrar_raiz', {
      argsObj: Voto3Args['obj']['registrar_raiz()uint64']
      argsTuple: Voto3Args['tuple']['registrar_raiz()uint64']
      returns: Voto3Returns['registrar_raiz()uint64']
    }>
    & Record<'abrir_registro_anuladores()void' | 'abrir_registro_anuladores', {
      argsObj: Voto3Args['obj']['abrir_registro_anuladores()void']
      argsTuple: Voto3Args['tuple']['abrir_registro_anuladores()void']
      returns: Voto3Returns['abrir_registro_anuladores()void']
    }>
    & Record<'cerrar_registro_anuladores()uint64' | 'cerrar_registro_anuladores', {
      argsObj: Voto3Args['obj']['cerrar_registro_anuladores()uint64']
      argsTuple: Voto3Args['tuple']['cerrar_registro_anuladores()uint64']
      returns: Voto3Returns['cerrar_registro_anuladores()uint64']
    }>
    & Record<'registrar_anulador()uint64' | 'registrar_anulador', {
      argsObj: Voto3Args['obj']['registrar_anulador()uint64']
      argsTuple: Voto3Args['tuple']['registrar_anulador()uint64']
      returns: Voto3Returns['registrar_anulador()uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        contadorCompromisos: bigint
        contadorRaices: bigint
        contadorAnuladores: bigint
        registroCompromisosAbierto: bigint
        registroCompromisosCerrado: bigint
        registroRaicesAbierto: bigint
        registroRaicesCerrado: bigint
        registroAnuladoresAbierto: bigint
        registroAnuladoresCerrado: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Voto3Signatures = keyof Voto3Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Voto3NonVoidMethodSignatures = keyof Voto3Types['methods'] extends infer T ? T extends keyof Voto3Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Voto3 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Voto3Signatures> = Voto3Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Voto3 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Voto3Signatures> = Voto3Types['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Voto3Types['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Voto3CreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Voto3DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Voto3CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Voto3 smart contract
 */
export abstract class Voto3ParamsFactory {
  /**
   * Constructs a no op call for the abrir_registro_compromisos()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static abrirRegistroCompromisos(params: CallParams<Voto3Args['obj']['abrir_registro_compromisos()void'] | Voto3Args['tuple']['abrir_registro_compromisos()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'abrir_registro_compromisos()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the cerrar_registro_compromisos()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static cerrarRegistroCompromisos(params: CallParams<Voto3Args['obj']['cerrar_registro_compromisos()uint64'] | Voto3Args['tuple']['cerrar_registro_compromisos()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'cerrar_registro_compromisos()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the registrar_compromiso()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static registrarCompromiso(params: CallParams<Voto3Args['obj']['registrar_compromiso()uint64'] | Voto3Args['tuple']['registrar_compromiso()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'registrar_compromiso()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the abrir_registro_raices()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static abrirRegistroRaices(params: CallParams<Voto3Args['obj']['abrir_registro_raices()void'] | Voto3Args['tuple']['abrir_registro_raices()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'abrir_registro_raices()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the cerrar_registro_raices()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static cerrarRegistroRaices(params: CallParams<Voto3Args['obj']['cerrar_registro_raices()uint64'] | Voto3Args['tuple']['cerrar_registro_raices()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'cerrar_registro_raices()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the registrar_raiz()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static registrarRaiz(params: CallParams<Voto3Args['obj']['registrar_raiz()uint64'] | Voto3Args['tuple']['registrar_raiz()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'registrar_raiz()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the abrir_registro_anuladores()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static abrirRegistroAnuladores(params: CallParams<Voto3Args['obj']['abrir_registro_anuladores()void'] | Voto3Args['tuple']['abrir_registro_anuladores()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'abrir_registro_anuladores()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the cerrar_registro_anuladores()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static cerrarRegistroAnuladores(params: CallParams<Voto3Args['obj']['cerrar_registro_anuladores()uint64'] | Voto3Args['tuple']['cerrar_registro_anuladores()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'cerrar_registro_anuladores()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the registrar_anulador()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static registrarAnulador(params: CallParams<Voto3Args['obj']['registrar_anulador()uint64'] | Voto3Args['tuple']['registrar_anulador()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'registrar_anulador()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Voto3 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Voto3Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Voto3Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Voto3Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Voto3Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Voto3 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Voto3DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new Voto3Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Voto3 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Voto3 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Voto3 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new Voto3Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Voto3 smart contract
 */
export class Voto3Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Voto3Client`
   *
   * @param appClient An `AppClient` instance which has been created with the Voto3 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Voto3Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Voto3NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Voto3Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Voto3Client> {
    return new Voto3Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Voto3Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Voto3Client> {
    return new Voto3Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Voto3 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Voto3 smart contract using the `abrir_registro_compromisos()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    abrirRegistroCompromisos: (params: CallParams<Voto3Args['obj']['abrir_registro_compromisos()void'] | Voto3Args['tuple']['abrir_registro_compromisos()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Voto3ParamsFactory.abrirRegistroCompromisos(params))
    },

    /**
     * Makes a call to the Voto3 smart contract using the `cerrar_registro_compromisos()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    cerrarRegistroCompromisos: (params: CallParams<Voto3Args['obj']['cerrar_registro_compromisos()uint64'] | Voto3Args['tuple']['cerrar_registro_compromisos()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Voto3ParamsFactory.cerrarRegistroCompromisos(params))
    },

    /**
     * Makes a call to the Voto3 smart contract using the `registrar_compromiso()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    registrarCompromiso: (params: CallParams<Voto3Args['obj']['registrar_compromiso()uint64'] | Voto3Args['tuple']['registrar_compromiso()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Voto3ParamsFactory.registrarCompromiso(params))
    },

    /**
     * Makes a call to the Voto3 smart contract using the `abrir_registro_raices()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    abrirRegistroRaices: (params: CallParams<Voto3Args['obj']['abrir_registro_raices()void'] | Voto3Args['tuple']['abrir_registro_raices()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Voto3ParamsFactory.abrirRegistroRaices(params))
    },

    /**
     * Makes a call to the Voto3 smart contract using the `cerrar_registro_raices()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    cerrarRegistroRaices: (params: CallParams<Voto3Args['obj']['cerrar_registro_raices()uint64'] | Voto3Args['tuple']['cerrar_registro_raices()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Voto3ParamsFactory.cerrarRegistroRaices(params))
    },

    /**
     * Makes a call to the Voto3 smart contract using the `registrar_raiz()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    registrarRaiz: (params: CallParams<Voto3Args['obj']['registrar_raiz()uint64'] | Voto3Args['tuple']['registrar_raiz()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Voto3ParamsFactory.registrarRaiz(params))
    },

    /**
     * Makes a call to the Voto3 smart contract using the `abrir_registro_anuladores()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    abrirRegistroAnuladores: (params: CallParams<Voto3Args['obj']['abrir_registro_anuladores()void'] | Voto3Args['tuple']['abrir_registro_anuladores()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Voto3ParamsFactory.abrirRegistroAnuladores(params))
    },

    /**
     * Makes a call to the Voto3 smart contract using the `cerrar_registro_anuladores()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    cerrarRegistroAnuladores: (params: CallParams<Voto3Args['obj']['cerrar_registro_anuladores()uint64'] | Voto3Args['tuple']['cerrar_registro_anuladores()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Voto3ParamsFactory.cerrarRegistroAnuladores(params))
    },

    /**
     * Makes a call to the Voto3 smart contract using the `registrar_anulador()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    registrarAnulador: (params: CallParams<Voto3Args['obj']['registrar_anulador()uint64'] | Voto3Args['tuple']['registrar_anulador()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Voto3ParamsFactory.registrarAnulador(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Voto3 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Voto3 smart contract using the `abrir_registro_compromisos()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    abrirRegistroCompromisos: (params: CallParams<Voto3Args['obj']['abrir_registro_compromisos()void'] | Voto3Args['tuple']['abrir_registro_compromisos()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Voto3ParamsFactory.abrirRegistroCompromisos(params))
    },

    /**
     * Makes a call to the Voto3 smart contract using the `cerrar_registro_compromisos()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    cerrarRegistroCompromisos: (params: CallParams<Voto3Args['obj']['cerrar_registro_compromisos()uint64'] | Voto3Args['tuple']['cerrar_registro_compromisos()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Voto3ParamsFactory.cerrarRegistroCompromisos(params))
    },

    /**
     * Makes a call to the Voto3 smart contract using the `registrar_compromiso()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    registrarCompromiso: (params: CallParams<Voto3Args['obj']['registrar_compromiso()uint64'] | Voto3Args['tuple']['registrar_compromiso()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Voto3ParamsFactory.registrarCompromiso(params))
    },

    /**
     * Makes a call to the Voto3 smart contract using the `abrir_registro_raices()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    abrirRegistroRaices: (params: CallParams<Voto3Args['obj']['abrir_registro_raices()void'] | Voto3Args['tuple']['abrir_registro_raices()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Voto3ParamsFactory.abrirRegistroRaices(params))
    },

    /**
     * Makes a call to the Voto3 smart contract using the `cerrar_registro_raices()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    cerrarRegistroRaices: (params: CallParams<Voto3Args['obj']['cerrar_registro_raices()uint64'] | Voto3Args['tuple']['cerrar_registro_raices()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Voto3ParamsFactory.cerrarRegistroRaices(params))
    },

    /**
     * Makes a call to the Voto3 smart contract using the `registrar_raiz()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    registrarRaiz: (params: CallParams<Voto3Args['obj']['registrar_raiz()uint64'] | Voto3Args['tuple']['registrar_raiz()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Voto3ParamsFactory.registrarRaiz(params))
    },

    /**
     * Makes a call to the Voto3 smart contract using the `abrir_registro_anuladores()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    abrirRegistroAnuladores: (params: CallParams<Voto3Args['obj']['abrir_registro_anuladores()void'] | Voto3Args['tuple']['abrir_registro_anuladores()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Voto3ParamsFactory.abrirRegistroAnuladores(params))
    },

    /**
     * Makes a call to the Voto3 smart contract using the `cerrar_registro_anuladores()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    cerrarRegistroAnuladores: (params: CallParams<Voto3Args['obj']['cerrar_registro_anuladores()uint64'] | Voto3Args['tuple']['cerrar_registro_anuladores()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Voto3ParamsFactory.cerrarRegistroAnuladores(params))
    },

    /**
     * Makes a call to the Voto3 smart contract using the `registrar_anulador()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    registrarAnulador: (params: CallParams<Voto3Args['obj']['registrar_anulador()uint64'] | Voto3Args['tuple']['registrar_anulador()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Voto3ParamsFactory.registrarAnulador(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Voto3 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Voto3 smart contract using the `abrir_registro_compromisos()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    abrirRegistroCompromisos: async (params: CallParams<Voto3Args['obj']['abrir_registro_compromisos()void'] | Voto3Args['tuple']['abrir_registro_compromisos()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Voto3ParamsFactory.abrirRegistroCompromisos(params))
      return {...result, return: result.return as unknown as (undefined | Voto3Returns['abrir_registro_compromisos()void'])}
    },

    /**
     * Makes a call to the Voto3 smart contract using the `cerrar_registro_compromisos()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    cerrarRegistroCompromisos: async (params: CallParams<Voto3Args['obj']['cerrar_registro_compromisos()uint64'] | Voto3Args['tuple']['cerrar_registro_compromisos()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Voto3ParamsFactory.cerrarRegistroCompromisos(params))
      return {...result, return: result.return as unknown as (undefined | Voto3Returns['cerrar_registro_compromisos()uint64'])}
    },

    /**
     * Makes a call to the Voto3 smart contract using the `registrar_compromiso()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    registrarCompromiso: async (params: CallParams<Voto3Args['obj']['registrar_compromiso()uint64'] | Voto3Args['tuple']['registrar_compromiso()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Voto3ParamsFactory.registrarCompromiso(params))
      return {...result, return: result.return as unknown as (undefined | Voto3Returns['registrar_compromiso()uint64'])}
    },

    /**
     * Makes a call to the Voto3 smart contract using the `abrir_registro_raices()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    abrirRegistroRaices: async (params: CallParams<Voto3Args['obj']['abrir_registro_raices()void'] | Voto3Args['tuple']['abrir_registro_raices()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Voto3ParamsFactory.abrirRegistroRaices(params))
      return {...result, return: result.return as unknown as (undefined | Voto3Returns['abrir_registro_raices()void'])}
    },

    /**
     * Makes a call to the Voto3 smart contract using the `cerrar_registro_raices()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    cerrarRegistroRaices: async (params: CallParams<Voto3Args['obj']['cerrar_registro_raices()uint64'] | Voto3Args['tuple']['cerrar_registro_raices()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Voto3ParamsFactory.cerrarRegistroRaices(params))
      return {...result, return: result.return as unknown as (undefined | Voto3Returns['cerrar_registro_raices()uint64'])}
    },

    /**
     * Makes a call to the Voto3 smart contract using the `registrar_raiz()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    registrarRaiz: async (params: CallParams<Voto3Args['obj']['registrar_raiz()uint64'] | Voto3Args['tuple']['registrar_raiz()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Voto3ParamsFactory.registrarRaiz(params))
      return {...result, return: result.return as unknown as (undefined | Voto3Returns['registrar_raiz()uint64'])}
    },

    /**
     * Makes a call to the Voto3 smart contract using the `abrir_registro_anuladores()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    abrirRegistroAnuladores: async (params: CallParams<Voto3Args['obj']['abrir_registro_anuladores()void'] | Voto3Args['tuple']['abrir_registro_anuladores()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Voto3ParamsFactory.abrirRegistroAnuladores(params))
      return {...result, return: result.return as unknown as (undefined | Voto3Returns['abrir_registro_anuladores()void'])}
    },

    /**
     * Makes a call to the Voto3 smart contract using the `cerrar_registro_anuladores()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    cerrarRegistroAnuladores: async (params: CallParams<Voto3Args['obj']['cerrar_registro_anuladores()uint64'] | Voto3Args['tuple']['cerrar_registro_anuladores()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Voto3ParamsFactory.cerrarRegistroAnuladores(params))
      return {...result, return: result.return as unknown as (undefined | Voto3Returns['cerrar_registro_anuladores()uint64'])}
    },

    /**
     * Makes a call to the Voto3 smart contract using the `registrar_anulador()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    registrarAnulador: async (params: CallParams<Voto3Args['obj']['registrar_anulador()uint64'] | Voto3Args['tuple']['registrar_anulador()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Voto3ParamsFactory.registrarAnulador(params))
      return {...result, return: result.return as unknown as (undefined | Voto3Returns['registrar_anulador()uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Voto3Client(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Voto3 app
   */
  state = {
    /**
     * Methods to access global state for the current Voto3 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          contadorCompromisos: result.contador_compromisos,
          contadorRaices: result.contador_raices,
          contadorAnuladores: result.contador_anuladores,
          registroCompromisosAbierto: result.registro_compromisos_abierto,
          registroCompromisosCerrado: result.registro_compromisos_cerrado,
          registroRaicesAbierto: result.registro_raices_abierto,
          registroRaicesCerrado: result.registro_raices_cerrado,
          registroAnuladoresAbierto: result.registro_anuladores_abierto,
          registroAnuladoresCerrado: result.registro_anuladores_cerrado,
        }
      },
      /**
       * Get the current value of the contador_compromisos key in global state
       */
      contadorCompromisos: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contador_compromisos")) as bigint | undefined },
      /**
       * Get the current value of the contador_raices key in global state
       */
      contadorRaices: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contador_raices")) as bigint | undefined },
      /**
       * Get the current value of the contador_anuladores key in global state
       */
      contadorAnuladores: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contador_anuladores")) as bigint | undefined },
      /**
       * Get the current value of the registro_compromisos_abierto key in global state
       */
      registroCompromisosAbierto: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("registro_compromisos_abierto")) as bigint | undefined },
      /**
       * Get the current value of the registro_compromisos_cerrado key in global state
       */
      registroCompromisosCerrado: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("registro_compromisos_cerrado")) as bigint | undefined },
      /**
       * Get the current value of the registro_raices_abierto key in global state
       */
      registroRaicesAbierto: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("registro_raices_abierto")) as bigint | undefined },
      /**
       * Get the current value of the registro_raices_cerrado key in global state
       */
      registroRaicesCerrado: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("registro_raices_cerrado")) as bigint | undefined },
      /**
       * Get the current value of the registro_anuladores_abierto key in global state
       */
      registroAnuladoresAbierto: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("registro_anuladores_abierto")) as bigint | undefined },
      /**
       * Get the current value of the registro_anuladores_cerrado key in global state
       */
      registroAnuladoresCerrado: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("registro_anuladores_cerrado")) as bigint | undefined },
    },
  }

  public newGroup(): Voto3Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a abrir_registro_compromisos()void method call against the Voto3 contract
       */
      abrirRegistroCompromisos(params: CallParams<Voto3Args['obj']['abrir_registro_compromisos()void'] | Voto3Args['tuple']['abrir_registro_compromisos()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.abrirRegistroCompromisos(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a cerrar_registro_compromisos()uint64 method call against the Voto3 contract
       */
      cerrarRegistroCompromisos(params: CallParams<Voto3Args['obj']['cerrar_registro_compromisos()uint64'] | Voto3Args['tuple']['cerrar_registro_compromisos()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.cerrarRegistroCompromisos(params)))
        resultMappers.push((v) => client.decodeReturnValue('cerrar_registro_compromisos()uint64', v))
        return this
      },
      /**
       * Add a registrar_compromiso()uint64 method call against the Voto3 contract
       */
      registrarCompromiso(params: CallParams<Voto3Args['obj']['registrar_compromiso()uint64'] | Voto3Args['tuple']['registrar_compromiso()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.registrarCompromiso(params)))
        resultMappers.push((v) => client.decodeReturnValue('registrar_compromiso()uint64', v))
        return this
      },
      /**
       * Add a abrir_registro_raices()void method call against the Voto3 contract
       */
      abrirRegistroRaices(params: CallParams<Voto3Args['obj']['abrir_registro_raices()void'] | Voto3Args['tuple']['abrir_registro_raices()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.abrirRegistroRaices(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a cerrar_registro_raices()uint64 method call against the Voto3 contract
       */
      cerrarRegistroRaices(params: CallParams<Voto3Args['obj']['cerrar_registro_raices()uint64'] | Voto3Args['tuple']['cerrar_registro_raices()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.cerrarRegistroRaices(params)))
        resultMappers.push((v) => client.decodeReturnValue('cerrar_registro_raices()uint64', v))
        return this
      },
      /**
       * Add a registrar_raiz()uint64 method call against the Voto3 contract
       */
      registrarRaiz(params: CallParams<Voto3Args['obj']['registrar_raiz()uint64'] | Voto3Args['tuple']['registrar_raiz()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.registrarRaiz(params)))
        resultMappers.push((v) => client.decodeReturnValue('registrar_raiz()uint64', v))
        return this
      },
      /**
       * Add a abrir_registro_anuladores()void method call against the Voto3 contract
       */
      abrirRegistroAnuladores(params: CallParams<Voto3Args['obj']['abrir_registro_anuladores()void'] | Voto3Args['tuple']['abrir_registro_anuladores()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.abrirRegistroAnuladores(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a cerrar_registro_anuladores()uint64 method call against the Voto3 contract
       */
      cerrarRegistroAnuladores(params: CallParams<Voto3Args['obj']['cerrar_registro_anuladores()uint64'] | Voto3Args['tuple']['cerrar_registro_anuladores()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.cerrarRegistroAnuladores(params)))
        resultMappers.push((v) => client.decodeReturnValue('cerrar_registro_anuladores()uint64', v))
        return this
      },
      /**
       * Add a registrar_anulador()uint64 method call against the Voto3 contract
       */
      registrarAnulador(params: CallParams<Voto3Args['obj']['registrar_anulador()uint64'] | Voto3Args['tuple']['registrar_anulador()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.registrarAnulador(params)))
        resultMappers.push((v) => client.decodeReturnValue('registrar_anulador()uint64', v))
        return this
      },
      /**
       * Add a clear state call to the Voto3 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Voto3Composer
  }
}
export type Voto3Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the abrir_registro_compromisos()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  abrirRegistroCompromisos(params?: CallParams<Voto3Args['obj']['abrir_registro_compromisos()void'] | Voto3Args['tuple']['abrir_registro_compromisos()void']>): Voto3Composer<[...TReturns, Voto3Returns['abrir_registro_compromisos()void'] | undefined]>

  /**
   * Calls the cerrar_registro_compromisos()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cerrarRegistroCompromisos(params?: CallParams<Voto3Args['obj']['cerrar_registro_compromisos()uint64'] | Voto3Args['tuple']['cerrar_registro_compromisos()uint64']>): Voto3Composer<[...TReturns, Voto3Returns['cerrar_registro_compromisos()uint64'] | undefined]>

  /**
   * Calls the registrar_compromiso()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registrarCompromiso(params?: CallParams<Voto3Args['obj']['registrar_compromiso()uint64'] | Voto3Args['tuple']['registrar_compromiso()uint64']>): Voto3Composer<[...TReturns, Voto3Returns['registrar_compromiso()uint64'] | undefined]>

  /**
   * Calls the abrir_registro_raices()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  abrirRegistroRaices(params?: CallParams<Voto3Args['obj']['abrir_registro_raices()void'] | Voto3Args['tuple']['abrir_registro_raices()void']>): Voto3Composer<[...TReturns, Voto3Returns['abrir_registro_raices()void'] | undefined]>

  /**
   * Calls the cerrar_registro_raices()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cerrarRegistroRaices(params?: CallParams<Voto3Args['obj']['cerrar_registro_raices()uint64'] | Voto3Args['tuple']['cerrar_registro_raices()uint64']>): Voto3Composer<[...TReturns, Voto3Returns['cerrar_registro_raices()uint64'] | undefined]>

  /**
   * Calls the registrar_raiz()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registrarRaiz(params?: CallParams<Voto3Args['obj']['registrar_raiz()uint64'] | Voto3Args['tuple']['registrar_raiz()uint64']>): Voto3Composer<[...TReturns, Voto3Returns['registrar_raiz()uint64'] | undefined]>

  /**
   * Calls the abrir_registro_anuladores()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  abrirRegistroAnuladores(params?: CallParams<Voto3Args['obj']['abrir_registro_anuladores()void'] | Voto3Args['tuple']['abrir_registro_anuladores()void']>): Voto3Composer<[...TReturns, Voto3Returns['abrir_registro_anuladores()void'] | undefined]>

  /**
   * Calls the cerrar_registro_anuladores()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cerrarRegistroAnuladores(params?: CallParams<Voto3Args['obj']['cerrar_registro_anuladores()uint64'] | Voto3Args['tuple']['cerrar_registro_anuladores()uint64']>): Voto3Composer<[...TReturns, Voto3Returns['cerrar_registro_anuladores()uint64'] | undefined]>

  /**
   * Calls the registrar_anulador()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registrarAnulador(params?: CallParams<Voto3Args['obj']['registrar_anulador()uint64'] | Voto3Args['tuple']['registrar_anulador()uint64']>): Voto3Composer<[...TReturns, Voto3Returns['registrar_anulador()uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Voto3 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Voto3Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Voto3Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Voto3ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Voto3ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Voto3ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Voto3ComposerResults<TReturns>>
}
export type Voto3ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

